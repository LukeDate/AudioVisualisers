{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\nlet analyser = context.createAudioAnalyser();\nlet audio = new Audio();\nlet context = new (window.AudioContext || window.webkitAudioContext)();\nlet freqArr = new Uint8Array(analyser.frequencyBitCount);\n\nconst initPage = ({\n  animationLooper\n}) => {\n  audio.src = \"\";\n  let source = context.createMediaElementSource(audio);\n  source.connect(analyser);\n  analyser.connect(context.destination);\n  audio.play();\n  animationLooper();\n};\n\nconst CircleContainer = () => {\n  let ref = useRef();\n  let dpi = window.devicePixelRatio;\n  useEffect(() => {\n    let getCtx = ref.current;\n    console.log(getCtx);\n    setCtx(getCtx);\n  }, []);\n  const [ctx, setCtx] = useState('');\n  let radius = 150;\n  let center_x = ctx.width / 2;\n  let center_y = ctx.height / 2;\n\n  const animationLooper = () => {\n    ctx.getContext('2d').imageSmoothingEnabled = false;\n    ctx.getContext('2d').beginPath();\n    ctx.getContext('2d').arc(center_x, center_y, radius, 0, 2 * Math.PI);\n    ctx.getContext('2d').stroke();\n    analyser.getByteFrequencyData(freqArr);\n\n    for (let i = 0; i < bars; i++) {\n      let rads = Math.PI * 2 / bars;\n      let bar_height = 100;\n      let bar_width = 2;\n      let x = center_x + Math.cos(rads * i) * radius;\n      let y = center_y + Math.sin(rads * i) * radius;\n      let x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      let y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n      drawBar(x, y, x_end, y_end, bar_width);\n    }\n\n    window.requestAnimationFrame(animationLooper);\n  };\n\n  const drawBar = (x1, y1, x2, y2, width, frequency) => {\n    let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    ctx.getContext('2d').strokeStyle = lineColor;\n    ctx.getContext('2d').lineWidth = width;\n    ctx.getContext('2d').beginPath();\n    ctx.getContext('2d').moveTo(x1, y1);\n    ctx.getContext('2d').lineTo(x2, y2);\n    ctx.getContext('2d').stroke();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircleCanvas, {\n    width: \"600\",\n    height: \"600\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, initPage(animationLooper)));\n};\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","useEffect","useState","useRef","styled","Wrapper","CircleCanvas","analyser","context","createAudioAnalyser","audio","Audio","window","AudioContext","webkitAudioContext","freqArr","Uint8Array","frequencyBitCount","initPage","animationLooper","src","source","createMediaElementSource","connect","destination","play","CircleContainer","ref","dpi","devicePixelRatio","getCtx","current","console","log","setCtx","ctx","radius","center_x","width","center_y","height","getContext","imageSmoothingEnabled","beginPath","arc","Math","PI","stroke","getByteFrequencyData","i","bars","rads","bar_height","bar_width","x","cos","y","sin","x_end","y_end","drawBar","requestAnimationFrame","x1","y1","x2","y2","frequency","lineColor","strokeStyle","lineWidth","moveTo","lineTo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nlet analyser = context.createAudioAnalyser();\nlet audio = new Audio();\nlet context = new (window.AudioContext || window.webkitAudioContext);\nlet freqArr = new Uint8Array(analyser.frequencyBitCount);\n\nconst initPage = ({animationLooper}) => {\n\n    audio.src = \"\";\n    let source = context.createMediaElementSource(audio);\n    source.connect(analyser);\n    analyser.connect(context.destination);\n\n\n    audio.play();\n    animationLooper();\n}\n\nconst CircleContainer = () => {\n    let ref = useRef();\n    let dpi = window.devicePixelRatio;\n\n    useEffect(() => {\n        let getCtx = ref.current;\n        console.log(getCtx);\n        setCtx(getCtx);\n    }, [])\n    const [ctx, setCtx] = useState('')\n    \n    let radius = 150;\n    let center_x = ctx.width / 2;\n    let center_y = ctx.height / 2;\n\n    const animationLooper = () => {\n        \n            ctx.getContext('2d').imageSmoothingEnabled = false;\n            ctx.getContext('2d').beginPath();\n            ctx.getContext('2d').arc(center_x,center_y,radius,0,2*Math.PI);\n            ctx.getContext('2d').stroke();\n\n            analyser.getByteFrequencyData(freqArr);\n\n            for(let i=0; i < bars; i++) {\n                let rads = Math.PI * 2 / bars;\n                let bar_height = 100;\n                let bar_width = 2;\n                let x = center_x + Math.cos(rads * i) * (radius);\n                let y = center_y + Math.sin(rads * i) * (radius);\n                let x_end = center_x + Math.cos(rads * i)*(radius + bar_height);\n                let y_end = center_y + Math.sin(rads * i)*(radius + bar_height);\n    \n                drawBar(x, y, x_end, y_end, bar_width);\n            }\n\n            window.requestAnimationFrame(animationLooper);\n        \n    }\n\n    const drawBar = (x1, y1, x2, y2, width,frequency) => {\n        \n        let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        \n        ctx.getContext('2d').strokeStyle = lineColor;\n        ctx.getContext('2d').lineWidth = width;\n        ctx.getContext('2d').beginPath();\n        ctx.getContext('2d').moveTo(x1,y1);\n        ctx.getContext('2d').lineTo(x2,y2);\n        ctx.getContext('2d').stroke();\n        }\n    \n    return (\n        <Wrapper>\n            <CircleCanvas width=\"600\" height=\"600\" ref={ref}>\n                {/* <Circle />\n                <Bar /> */}\n                {/* {ctx && drawCircle()} */}\n\n                {initPage(animationLooper)}\n                {/* {ctx && drawBars()} */}\n            </CircleCanvas>\n        </Wrapper>\n    )\n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}