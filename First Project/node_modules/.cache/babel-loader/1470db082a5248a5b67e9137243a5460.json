{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js\";\nimport React, { useRef, useEffect } from 'react'; // import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport '../App.css';\n\nconst VisualDemo = ({ ...props\n}) => {\n  let Ref = useRef(null);\n\n  function renderFrame(canvas) {\n    // console.log(canvas.current.getContext('2d'));\n    // let canvas = document.getElementById(\"canvas\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    // let ctx = canvas.current.getContext('2d');\n    let width = canvas.width;\n    let height = canvas.height;\n    let barWidth = width / props.bufferLength;\n    let barHeight;\n    let x = 0;\n    requestAnimationFrame(renderFrame);\n    x = 0;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    canvas.current.getContext('2d').fillStyle = \"#000\";\n    canvas.current.getContext('2d').fillRect(0, 0, width, height);\n\n    for (let i = 0; i < props.bufferLength; i++) {\n      barHeight = props.dataArray[i];\n      let r = barHeight + 25 * (i / props.bufferLength);\n      let g = 250 * (i / props.bufferLength);\n      let b = 50;\n      canvas.current.getContext('2d').fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      canvas.current.getContext('2d').fillRect(x, height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: Ref,\n    height: 200,\n    width: 750,\n    id: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, props.isPlaying && renderFrame(Ref));\n};\n\nexport default VisualDemo;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js"],"names":["React","useRef","useEffect","VisualDemo","props","Ref","renderFrame","canvas","width","height","barWidth","bufferLength","barHeight","x","requestAnimationFrame","analyser","getByteFrequencyData","dataArray","current","getContext","fillStyle","fillRect","i","r","g","b","isPlaying"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAA0C,OAA1C,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AACjC,MAAIC,GAAG,GAAGJ,MAAM,CAAC,IAAD,CAAhB;;AAEA,WAASK,WAAT,CAAqBC,MAArB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AAEA,QAAIC,KAAK,GAAGD,MAAM,CAACC,KAAnB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AAEA,QAAIC,QAAQ,GAAIF,KAAK,GAAGJ,KAAK,CAACO,YAA9B;AACA,QAAIC,SAAJ;AACA,QAAIC,CAAC,GAAG,CAAR;AACAC,IAAAA,qBAAqB,CAACR,WAAD,CAArB;AACAO,IAAAA,CAAC,GAAC,CAAF;AACAT,IAAAA,KAAK,CAACW,QAAN,CAAeC,oBAAf,CAAoCZ,KAAK,CAACa,SAA1C;AACAV,IAAAA,MAAM,CAACW,OAAP,CAAeC,UAAf,CAA0B,IAA1B,EAAgCC,SAAhC,GAA0C,MAA1C;AACAb,IAAAA,MAAM,CAACW,OAAP,CAAeC,UAAf,CAA0B,IAA1B,EAAgCE,QAAhC,CAAyC,CAAzC,EAA4C,CAA5C,EAA+Cb,KAA/C,EAAsDC,MAAtD;;AACA,SAAI,IAAIa,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGlB,KAAK,CAACO,YAAvB,EAAqCW,CAAC,EAAtC,EAAyC;AACvCV,MAAAA,SAAS,GAAGR,KAAK,CAACa,SAAN,CAAgBK,CAAhB,CAAZ;AACA,UAAIC,CAAC,GAAGX,SAAS,GAAI,MAAMU,CAAC,GAAClB,KAAK,CAACO,YAAd,CAArB;AACA,UAAIa,CAAC,GAAG,OAAOF,CAAC,GAAClB,KAAK,CAACO,YAAf,CAAR;AACA,UAAIc,CAAC,GAAG,EAAR;AACAlB,MAAAA,MAAM,CAACW,OAAP,CAAeC,UAAf,CAA0B,IAA1B,EAAgCC,SAAhC,GAA4C,SAASG,CAAT,GAAa,GAAb,GAAmBC,CAAnB,GAAuB,GAAvB,GAA6BC,CAA7B,GAAgC,GAA5E;AACAlB,MAAAA,MAAM,CAACW,OAAP,CAAeC,UAAf,CAA0B,IAA1B,EAAgCE,QAAhC,CAAyCR,CAAzC,EAA4CJ,MAAM,GAAGG,SAArD,EAAgEF,QAAhE,EAA0EE,SAA1E;AACAC,MAAAA,CAAC,IAAIH,QAAQ,GAAG,CAAhB;AACD;AACF;;AACD,sBACE;AAAQ,IAAA,GAAG,EAAEL,GAAb;AAAkB,IAAA,MAAM,EAAE,GAA1B;AAA+B,IAAA,KAAK,EAAE,GAAtC;AAA2C,IAAA,EAAE,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACsB,SAAN,IAAmBpB,WAAW,CAACD,GAAD,CADjC,CADF;AAMD,CArCD;;AAuCA,eAAeF,UAAf","sourcesContent":["import React, { useRef, useEffect }  from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\n\nconst VisualDemo = ({...props}) => {\n  let Ref = useRef(null)\n  \n  function renderFrame(canvas) {\n    // console.log(canvas.current.getContext('2d'));\n    // let canvas = document.getElementById(\"canvas\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    // let ctx = canvas.current.getContext('2d');\n    \n    let width = canvas.width;\n    let height = canvas.height;\n    \n    let barWidth = (width / props.bufferLength);\n    let barHeight;\n    let x = 0;\n    requestAnimationFrame(renderFrame);\n    x=0;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    canvas.current.getContext('2d').fillStyle=\"#000\";\n    canvas.current.getContext('2d').fillRect(0, 0, width, height);\n    for(let i=0; i < props.bufferLength; i++){\n      barHeight = props.dataArray[i];\n      let r = barHeight + (25 * (i/props.bufferLength));\n      let g = 250 * (i/props.bufferLength);\n      let b = 50;\n      canvas.current.getContext('2d').fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n      canvas.current.getContext('2d').fillRect(x, height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }  \n  return (\n    <canvas ref={Ref} height={200} width={750} id=\"canvas\">\n      {props.isPlaying && renderFrame(Ref)}\n      {/* {renderFrame(Ref.current)} */}\n    </canvas>\n  )\n}\n\nexport default VisualDemo;"]},"metadata":{},"sourceType":"module"}