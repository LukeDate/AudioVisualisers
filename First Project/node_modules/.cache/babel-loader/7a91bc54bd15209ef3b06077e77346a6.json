{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nclass CircleContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      analyser: '',\n      freqArray: [],\n      audio: {}\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateCanvas(this.canvasRef); // animationLooper(analyser, freqArr);\n\n    this.state.audio.play().then(res => console.log(res)).catch(err => console.log('error', err));\n  }\n\n  componentWillMount() {\n    let audio = new Audio();\n    let context = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = context.createAnalyser();\n    let freqArr = new Uint8Array(analyser.frequencyBinCount);\n    this.setState({\n      analyser: analyser,\n      freqArray: freqArr,\n      audio: audio\n    });\n    audio.src = \"/it_came_from_china.ogg\";\n    audio.crossOrigin = \"anonymous\";\n    let source = context.createMediaElementSource(audio);\n    source.connect(analyser);\n    analyser.connect(context.destination); // audio.play();\n  }\n\n  drawBar(x1, y1, x2, y2, width, frequency, ctx) {\n    let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n\n  updateCanvas(canvas) {\n    const bars = 200;\n    const radius = 150;\n    const center_x = 300;\n    const center_y = 300;\n    const ctx = canvas.current.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.arc(center_x, center_y, 150, 0, 2 * Math.PI);\n    ctx.stroke();\n    this.state.analyser.getByteFrequencyData(this.state.freqArray);\n\n    for (let i = 0; i < bars; i++) {\n      let rads = Math.PI * 2 / bars;\n      let bar_height = this.state.freqArray[i] * 0.7;\n      let bar_width = 2;\n      let x = center_x + Math.cos(rads * i) * radius;\n      let y = center_y + Math.sin(rads * i) * radius;\n      let x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      let y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n      this.drawBar(x, y, x_end, y_end, bar_width, this.state.freqArray[i], ctx);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CircleCanvas, {\n      width: \"600\",\n      height: \"600\",\n      ref: this.canvasRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"audio\", {\n      controls: true,\n      preload: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"source\", {\n      src: \"it_comes_from_china.ogg\",\n      type: \"audio/mpeg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }), \"This text displays if the audio tag isn't supported.\"));\n  }\n\n}\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","styled","Wrapper","CircleCanvas","CircleContainer","Component","constructor","props","state","analyser","freqArray","audio","canvasRef","createRef","componentDidMount","updateCanvas","play","then","res","console","log","catch","err","componentWillMount","Audio","context","window","AudioContext","webkitAudioContext","createAnalyser","freqArr","Uint8Array","frequencyBinCount","setState","src","crossOrigin","source","createMediaElementSource","connect","destination","drawBar","x1","y1","x2","y2","width","frequency","ctx","lineColor","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","canvas","bars","radius","center_x","center_y","current","getContext","arc","Math","PI","getByteFrequencyData","i","rads","bar_height","bar_width","x","cos","y","sin","x_end","y_end","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nclass CircleContainer extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            analyser: '',\n            freqArray: [],\n            audio: {}\n         };\n        this.canvasRef = React.createRef()\n      }\n\n    componentDidMount() {\n        this.updateCanvas(this.canvasRef)\n                // animationLooper(analyser, freqArr);\n        this.state.audio.play().then(res => console.log(res))\n        .catch(err => console.log('error', err));\n    }\n\n    componentWillMount() {\n        let audio = new Audio();\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n        let analyser = context.createAnalyser();\n        let freqArr = new Uint8Array(analyser.frequencyBinCount);\n        this.setState({\n            analyser: analyser,\n            freqArray: freqArr,\n            audio: audio\n        })\n        audio.src = \"/it_came_from_china.ogg\";\n        audio.crossOrigin=\"anonymous\"\n        let source = context.createMediaElementSource(audio);\n        source.connect(analyser);\n        analyser.connect(context.destination);\n        // audio.play();\n\n    }\n\n    drawBar(x1, y1, x2, y2, width, frequency, ctx) {\n        let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        ctx.strokeStyle = lineColor;\n        ctx.lineWidth = width;\n        ctx.beginPath();\n        ctx.moveTo(x1,y1);\n        ctx.lineTo(x2,y2);\n        ctx.stroke();\n    }\n\n    updateCanvas(canvas) {\n        const bars = 200;\n        const radius = 150;\n        const center_x = 300;\n        const center_y = 300;\n        const ctx = canvas.current.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.arc(center_x, center_y, 150, 0, 2*Math.PI);\n        ctx.stroke();\n\n        this.state.analyser.getByteFrequencyData(this.state.freqArray);\n\n        for(let i=0; i < bars; i++) {\n            let rads = Math.PI * 2 / bars;\n            let bar_height = this.state.freqArray[i]*0.7;\n            let bar_width = 2;\n            let x = center_x + Math.cos(rads * i) * (radius);\n            let y = center_y + Math.sin(rads * i) * (radius);\n            let x_end = center_x + Math.cos(rads * i)*(radius + bar_height);\n            let y_end = center_y + Math.sin(rads * i)*(radius + bar_height);\n            this.drawBar(x, y, x_end, y_end, bar_width, this.state.freqArray[i], ctx);\n        }\n    }\n\n\n    render() {\n        return (\n            <Wrapper>\n                <CircleCanvas width=\"600\" height=\"600\" ref={this.canvasRef} />\n                <audio controls preload=\"auto\">\n                    <source src=\"it_comes_from_china.ogg\" type=\"audio/mpeg\" />\n                    This text displays if the audio tag isn't supported.\n                </audio>\n            </Wrapper>\n        )\n    }\n     \n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}