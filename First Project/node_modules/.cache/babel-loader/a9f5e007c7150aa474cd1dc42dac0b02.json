{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js\";\nimport React, { useRef } from 'react'; // import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport '../App.css';\n\nconst VisualDemo = ({ ...props\n}) => {\n  let canvas = document.getElementById(\"canvas\");\n  console.log('props', document);\n\n  function renderFrame() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let ctx = canvas.getContext('2d');\n    let width = canvas.width;\n    let height = canvas.height;\n    let barWidth = width / props.bufferLength;\n    let barHeight;\n    let x = 0;\n    requestAnimationFrame(renderFrame);\n    x = 0;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, width, height);\n\n    for (let i = 0; i < props.bufferLength; i++) {\n      barHeight = props.dataArray[i];\n      let r = barHeight + 25 * (i / props.bufferLength);\n      let g = 250 * (i / props.bufferLength);\n      let b = 50;\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, renderFrame());\n};\n\nexport default VisualDemo;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js"],"names":["React","useRef","VisualDemo","props","canvas","document","getElementById","console","log","renderFrame","width","window","innerWidth","height","innerHeight","ctx","getContext","barWidth","bufferLength","barHeight","x","requestAnimationFrame","analyser","getByteFrequencyData","dataArray","fillStyle","fillRect","i","r","g","b"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA+B,OAA/B,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AACjC,MAAIC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,QAArB;;AAEA,WAASI,WAAT,GAAuB;AACrBL,IAAAA,MAAM,CAACM,KAAP,GAAeC,MAAM,CAACC,UAAtB;AACAR,IAAAA,MAAM,CAACS,MAAP,GAAgBF,MAAM,CAACG,WAAvB;AACA,QAAIC,GAAG,GAAGX,MAAM,CAACY,UAAP,CAAkB,IAAlB,CAAV;AAEA,QAAIN,KAAK,GAAGN,MAAM,CAACM,KAAnB;AACA,QAAIG,MAAM,GAAGT,MAAM,CAACS,MAApB;AAEA,QAAII,QAAQ,GAAIP,KAAK,GAAGP,KAAK,CAACe,YAA9B;AACA,QAAIC,SAAJ;AACA,QAAIC,CAAC,GAAG,CAAR;AACAC,IAAAA,qBAAqB,CAACZ,WAAD,CAArB;AACAW,IAAAA,CAAC,GAAC,CAAF;AACAjB,IAAAA,KAAK,CAACmB,QAAN,CAAeC,oBAAf,CAAoCpB,KAAK,CAACqB,SAA1C;AACAT,IAAAA,GAAG,CAACU,SAAJ,GAAc,MAAd;AACAV,IAAAA,GAAG,CAACW,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBhB,KAAnB,EAA0BG,MAA1B;;AACA,SAAI,IAAIc,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGxB,KAAK,CAACe,YAAvB,EAAqCS,CAAC,EAAtC,EAAyC;AACvCR,MAAAA,SAAS,GAAGhB,KAAK,CAACqB,SAAN,CAAgBG,CAAhB,CAAZ;AACA,UAAIC,CAAC,GAAGT,SAAS,GAAI,MAAMQ,CAAC,GAACxB,KAAK,CAACe,YAAd,CAArB;AACA,UAAIW,CAAC,GAAG,OAAOF,CAAC,GAACxB,KAAK,CAACe,YAAf,CAAR;AACA,UAAIY,CAAC,GAAG,EAAR;AACAf,MAAAA,GAAG,CAACU,SAAJ,GAAgB,SAASG,CAAT,GAAa,GAAb,GAAmBC,CAAnB,GAAuB,GAAvB,GAA6BC,CAA7B,GAAgC,GAAhD;AACAf,MAAAA,GAAG,CAACW,QAAJ,CAAaN,CAAb,EAAgBP,MAAM,GAAGM,SAAzB,EAAoCF,QAApC,EAA8CE,SAA9C;AACAC,MAAAA,CAAC,IAAIH,QAAQ,GAAG,CAAhB;AACD;AACF;;AAID,sBACE;AAAK,IAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,WAAW,EADd,CADF;AAKD,CAtCD;;AAwCA,eAAeP,UAAf","sourcesContent":["import React, { useRef }  from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\n\nconst VisualDemo = ({...props}) => {\n  let canvas = document.getElementById(\"canvas\");\n  console.log('props', document);\n  \n  function renderFrame() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let ctx = canvas.getContext('2d');\n    \n    let width = canvas.width;\n    let height = canvas.height;\n    \n    let barWidth = (width / props.bufferLength);\n    let barHeight;\n    let x = 0;\n    requestAnimationFrame(renderFrame);\n    x=0;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    ctx.fillStyle=\"#000\";\n    ctx.fillRect(0, 0, width, height);\n    for(let i=0; i < props.bufferLength; i++){\n      barHeight = props.dataArray[i];\n      let r = barHeight + (25 * (i/props.bufferLength));\n      let g = 250 * (i/props.bufferLength);\n      let b = 50;\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n      ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n\n  \n  \n  return (\n    <div id=\"canvas\"> \n      {renderFrame()}\n    </div>\n  )\n}\n\nexport default VisualDemo;"]},"metadata":{},"sourceType":"module"}