{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js\";\nimport React, { useRef, useEffect, useState } from 'react'; // import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport '../App.css';\n\nconst VisualDemo = ({ ...props\n}) => {\n  let Ref = useRef();\n  const [divHeight, setHeight] = useState(0);\n  useEffect(() => {\n    Ref.current = canvas && requestAnimationFrame(renderFrame);\n    return () => cancelAnimationFrame(Ref.current);\n  }, []);\n  let canvas = document.querySelector(\"#canvas\");\n\n  function renderFrame() {\n    Ref.current = requestAnimationFrame(renderFrame); // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n\n    props.analyser.getByteFrequencyData(props.dataArray);\n    let ctx = canvas.getContext('2d'); // let width = canvas.width;\n    // let height = canvas.height;\n\n    let barWidth = 750 / props.bufferLength * 2.5;\n    let barHeight;\n    let x = 0; // ctx.fillStyle = \"#000\";\n\n    ctx.fillRect(0, 0, 750, 200);\n    x = 0;\n\n    for (let i = 0; i < props.bufferLength; i++) {\n      barHeight = props.dataArray[i];\n      let r = barHeight + 25 * (i / props.bufferLength);\n      let g = 250 * (i / props.bufferLength);\n      let b = 50;\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      ctx.fillRect(x, 200 - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: Ref,\n    height: 200,\n    width: 750,\n    id: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, canvas && renderFrame());\n};\n\nexport default VisualDemo;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js"],"names":["React","useRef","useEffect","useState","VisualDemo","props","Ref","divHeight","setHeight","current","canvas","requestAnimationFrame","renderFrame","cancelAnimationFrame","document","querySelector","analyser","getByteFrequencyData","dataArray","ctx","getContext","barWidth","bufferLength","barHeight","x","fillRect","i","r","g","b","fillStyle"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAoD,OAApD,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AACjC,MAAIC,GAAG,GAAGL,MAAM,EAAhB;AACA,QAAM,CAACM,SAAD,EAAYC,SAAZ,IAAyBL,QAAQ,CAAC,CAAD,CAAvC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,GAAG,CAACG,OAAJ,GAAcC,MAAM,IAAIC,qBAAqB,CAACC,WAAD,CAA7C;AACA,WAAO,MAAMC,oBAAoB,CAACP,GAAG,CAACG,OAAL,CAAjC;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,MAAIC,MAAM,GAAGI,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAb;;AACA,WAASH,WAAT,GAAuB;AACrBN,IAAAA,GAAG,CAACG,OAAJ,GAAcE,qBAAqB,CAACC,WAAD,CAAnC,CADqB,CAErB;AACA;;AACAP,IAAAA,KAAK,CAACW,QAAN,CAAeC,oBAAf,CAAoCZ,KAAK,CAACa,SAA1C;AAEA,QAAIC,GAAG,GAAGT,MAAM,CAACU,UAAP,CAAkB,IAAlB,CAAV,CANqB,CAOrB;AACA;;AAEA,QAAIC,QAAQ,GAAI,MAAMhB,KAAK,CAACiB,YAAb,GAA6B,GAA5C;AACA,QAAIC,SAAJ;AACA,QAAIC,CAAC,GAAG,CAAR,CAZqB,CAarB;;AACAL,IAAAA,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,GAAxB;AACAD,IAAAA,CAAC,GAAC,CAAF;;AACA,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGrB,KAAK,CAACiB,YAAvB,EAAqCI,CAAC,EAAtC,EAAyC;AACvCH,MAAAA,SAAS,GAAGlB,KAAK,CAACa,SAAN,CAAgBQ,CAAhB,CAAZ;AACA,UAAIC,CAAC,GAAGJ,SAAS,GAAI,MAAMG,CAAC,GAACrB,KAAK,CAACiB,YAAd,CAArB;AACA,UAAIM,CAAC,GAAG,OAAOF,CAAC,GAACrB,KAAK,CAACiB,YAAf,CAAR;AACA,UAAIO,CAAC,GAAG,EAAR;AACAV,MAAAA,GAAG,CAACW,SAAJ,GAAgB,SAASH,CAAT,GAAa,GAAb,GAAmBC,CAAnB,GAAuB,GAAvB,GAA6BC,CAA7B,GAAgC,GAAhD;AACAV,MAAAA,GAAG,CAACM,QAAJ,CAAaD,CAAb,EAAgB,MAAMD,SAAtB,EAAiCF,QAAjC,EAA2CE,SAA3C;AACAC,MAAAA,CAAC,IAAIH,QAAQ,GAAG,CAAhB;AACD;AACF;;AACD,sBACE;AAAQ,IAAA,GAAG,EAAEf,GAAb;AAAkB,IAAA,MAAM,EAAE,GAA1B;AAA+B,IAAA,KAAK,EAAE,GAAtC;AAA2C,IAAA,EAAE,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGI,MAAM,IAAIE,WAAW,EAFxB,CADF;AAMD,CA1CD;;AA4CA,eAAeR,UAAf","sourcesContent":["import React, { useRef, useEffect, useState }  from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\n\nconst VisualDemo = ({...props}) => {\n  let Ref = useRef()\n  const [divHeight, setHeight] = useState(0);\n\n  useEffect(() => {\n    Ref.current = canvas && requestAnimationFrame(renderFrame);\n    return () => cancelAnimationFrame(Ref.current);\n  }, []);\n  \n  let canvas = document.querySelector(\"#canvas\");\n  function renderFrame() {\n    Ref.current = requestAnimationFrame(renderFrame);\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    \n    let ctx = canvas.getContext('2d');\n    // let width = canvas.width;\n    // let height = canvas.height;\n    \n    let barWidth = (750 / props.bufferLength) * 2.5;\n    let barHeight;\n    let x = 0;\n    // ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, 750, 200);\n    x=0;\n    for(let i=0; i < props.bufferLength; i++){\n      barHeight = props.dataArray[i];\n      let r = barHeight + (25 * (i/props.bufferLength));\n      let g = 250 * (i/props.bufferLength);\n      let b = 50;\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n      ctx.fillRect(x, 200 - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n  return (\n    <canvas ref={Ref} height={200} width={750} id=\"canvas\">\n      {/* {props.isPlaying && renderFrame(Ref)} */}\n      {canvas && renderFrame()}\n    </canvas>\n  )\n}\n\nexport default VisualDemo;"]},"metadata":{},"sourceType":"module"}