{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nconst CircleContainer = () => {\n  let ref = useRef();\n  useEffect(() => {\n    let getCtx = ref.current;\n    console.log(getCtx);\n    setCtx(getCtx);\n    initPage(animationLooper(getCtx && getCtx.getContext(\"2d\")));\n  }, []);\n  const [ctx, setCtx] = useState('');\n  let audio = new Audio();\n  let context = new (window.AudioContext || window.webkitAudioContext)();\n  let analyser = context.createAnalyser();\n  let freqArr = new Uint8Array(analyser.frequencyBitCount);\n\n  const initPage = animationLooper => {\n    audio.src = \"/it_came_from_china.mp3\";\n    let source = context.createMediaElementSource(audio);\n    source.connect(analyser);\n    analyser.connect(context.destination);\n    audio.play();\n    animationLooper(ctx);\n  };\n\n  let radius = 150;\n  let center_x = ctx.width / 2;\n  let center_y = ctx.height / 2;\n\n  const animationLooper = ctx => {\n    let bars = 200; // ctx.imageSmoothingEnabled = false;\n\n    console.log('HELLO', ctx);\n    ctx.beginPath();\n    ctx.arc(center_x, center_y, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n    analyser.getByteFrequencyData(freqArr);\n\n    for (let i = 0; i < bars; i++) {\n      let rads = Math.PI * 2 / bars;\n      let bar_height = 100;\n      let bar_width = 2;\n      let x = center_x + Math.cos(rads * i) * radius;\n      let y = center_y + Math.sin(rads * i) * radius;\n      let x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      let y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n      drawBar(x, y, x_end, y_end, bar_width, freqArr[i], ctx);\n    }\n\n    window.requestAnimationFrame(animationLooper());\n  };\n\n  const drawBar = (x1, y1, x2, y2, width, frequency, ctx) => {\n    let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircleCanvas, {\n    width: \"600\",\n    height: \"600\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","useEffect","useState","useRef","styled","Wrapper","CircleCanvas","CircleContainer","ref","getCtx","current","console","log","setCtx","initPage","animationLooper","getContext","ctx","audio","Audio","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","freqArr","Uint8Array","frequencyBitCount","src","source","createMediaElementSource","connect","destination","play","radius","center_x","width","center_y","height","bars","beginPath","arc","Math","PI","stroke","getByteFrequencyData","i","rads","bar_height","bar_width","x","cos","y","sin","x_end","y_end","drawBar","requestAnimationFrame","x1","y1","x2","y2","frequency","lineColor","strokeStyle","lineWidth","moveTo","lineTo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,OAAO,GAAGD,MAAM,CAAC,KAAD,CAAQ;;;;;CAA9B;AAOA,MAAME,YAAY,GAAGF,MAAM,CAAC,QAAD,CAAW;;;CAAtC;;AAOA,MAAMG,eAAe,GAAG,MAAM;AAC1B,MAAIC,GAAG,GAAGL,MAAM,EAAhB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,MAAM,GAAGD,GAAG,CAACE,OAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAI,IAAAA,MAAM,CAACJ,MAAD,CAAN;AACAK,IAAAA,QAAQ,CAACC,eAAe,CAACN,MAAM,IAAIA,MAAM,CAACO,UAAP,CAAkB,IAAlB,CAAX,CAAhB,CAAR;AACH,GALQ,EAKN,EALM,CAAT;AAOA,QAAM,CAACC,GAAD,EAAMJ,MAAN,IAAgBX,QAAQ,CAAC,EAAD,CAA9B;AAEA,MAAIgB,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACA,MAAIC,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAd;AACA,MAAIC,QAAQ,GAAGJ,OAAO,CAACK,cAAR,EAAf;AACA,MAAIC,OAAO,GAAG,IAAIC,UAAJ,CAAeH,QAAQ,CAACI,iBAAxB,CAAd;;AAEA,QAAMd,QAAQ,GAAIC,eAAD,IAAqB;AAElCG,IAAAA,KAAK,CAACW,GAAN,GAAY,yBAAZ;AACA,QAAIC,MAAM,GAAGV,OAAO,CAACW,wBAAR,CAAiCb,KAAjC,CAAb;AACAY,IAAAA,MAAM,CAACE,OAAP,CAAeR,QAAf;AACAA,IAAAA,QAAQ,CAACQ,OAAT,CAAiBZ,OAAO,CAACa,WAAzB;AAGAf,IAAAA,KAAK,CAACgB,IAAN;AACAnB,IAAAA,eAAe,CAACE,GAAD,CAAf;AACP,GAVG;;AAYA,MAAIkB,MAAM,GAAG,GAAb;AACA,MAAIC,QAAQ,GAAGnB,GAAG,CAACoB,KAAJ,GAAY,CAA3B;AACA,MAAIC,QAAQ,GAAGrB,GAAG,CAACsB,MAAJ,GAAa,CAA5B;;AAEA,QAAMxB,eAAe,GAAIE,GAAD,IAAS;AACzB,QAAIuB,IAAI,GAAG,GAAX,CADyB,CAEzB;;AACA7B,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBK,GAArB;AACAA,IAAAA,GAAG,CAACwB,SAAJ;AACAxB,IAAAA,GAAG,CAACyB,GAAJ,CAAQN,QAAR,EAAiBE,QAAjB,EAA0BH,MAA1B,EAAiC,CAAjC,EAAmC,IAAEQ,IAAI,CAACC,EAA1C;AACA3B,IAAAA,GAAG,CAAC4B,MAAJ;AAEArB,IAAAA,QAAQ,CAACsB,oBAAT,CAA8BpB,OAA9B;;AAEA,SAAI,IAAIqB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGP,IAAjB,EAAuBO,CAAC,EAAxB,EAA4B;AACxB,UAAIC,IAAI,GAAGL,IAAI,CAACC,EAAL,GAAU,CAAV,GAAcJ,IAAzB;AACA,UAAIS,UAAU,GAAG,GAAjB;AACA,UAAIC,SAAS,GAAG,CAAhB;AACA,UAAIC,CAAC,GAAGf,QAAQ,GAAGO,IAAI,CAACS,GAAL,CAASJ,IAAI,GAAGD,CAAhB,IAAsBZ,MAAzC;AACA,UAAIkB,CAAC,GAAGf,QAAQ,GAAGK,IAAI,CAACW,GAAL,CAASN,IAAI,GAAGD,CAAhB,IAAsBZ,MAAzC;AACA,UAAIoB,KAAK,GAAGnB,QAAQ,GAAGO,IAAI,CAACS,GAAL,CAASJ,IAAI,GAAGD,CAAhB,KAAoBZ,MAAM,GAAGc,UAA7B,CAAvB;AACA,UAAIO,KAAK,GAAGlB,QAAQ,GAAGK,IAAI,CAACW,GAAL,CAASN,IAAI,GAAGD,CAAhB,KAAoBZ,MAAM,GAAGc,UAA7B,CAAvB;AACAQ,MAAAA,OAAO,CAACN,CAAD,EAAIE,CAAJ,EAAOE,KAAP,EAAcC,KAAd,EAAqBN,SAArB,EAAgCxB,OAAO,CAACqB,CAAD,CAAvC,EAA4C9B,GAA5C,CAAP;AACH;;AACDI,IAAAA,MAAM,CAACqC,qBAAP,CAA6B3C,eAAe,EAA5C;AAEP,GAtBD;;AAwBA,QAAM0C,OAAO,GAAG,CAACE,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBzB,KAAjB,EAAuB0B,SAAvB,EAAkC9C,GAAlC,KAA0C;AAEtD,QAAI+C,SAAS,GAAG,SAASD,SAAT,GAAqB,IAArB,GAA4BA,SAA5B,GAAwC,IAAxC,GAA+C,GAA/C,GAAqD,GAArE;AACA9C,IAAAA,GAAG,CAACgD,WAAJ,GAAkBD,SAAlB;AACA/C,IAAAA,GAAG,CAACiD,SAAJ,GAAgB7B,KAAhB;AACApB,IAAAA,GAAG,CAACwB,SAAJ;AACAxB,IAAAA,GAAG,CAACkD,MAAJ,CAAWR,EAAX,EAAcC,EAAd;AACA3C,IAAAA,GAAG,CAACmD,MAAJ,CAAWP,EAAX,EAAcC,EAAd;AACA7C,IAAAA,GAAG,CAAC4B,MAAJ;AACH,GATD;;AAWA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,KAApB;AAA0B,IAAA,MAAM,EAAC,KAAjC;AAAuC,IAAA,GAAG,EAAErC,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAUH,CA9ED;;AAgFA,eAAeD,eAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\n\n\nconst CircleContainer = () => {\n    let ref = useRef();\n\n    useEffect(() => {\n        let getCtx = ref.current;\n        console.log(getCtx);\n        setCtx(getCtx);\n        initPage(animationLooper(getCtx && getCtx.getContext(\"2d\")));\n    }, [])\n\n    const [ctx, setCtx] = useState('')\n\n    let audio = new Audio();\n    let context = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = context.createAnalyser();\n    let freqArr = new Uint8Array(analyser.frequencyBitCount);\n\n    const initPage = (animationLooper) => {\n\n        audio.src = \"/it_came_from_china.mp3\";\n        let source = context.createMediaElementSource(audio);\n        source.connect(analyser);\n        analyser.connect(context.destination);\n\n\n        audio.play();\n        animationLooper(ctx);\n}\n    \n    let radius = 150;\n    let center_x = ctx.width / 2;\n    let center_y = ctx.height / 2;\n\n    const animationLooper = (ctx) => {\n            let bars = 200;\n            // ctx.imageSmoothingEnabled = false;\n            console.log('HELLO', ctx);\n            ctx.beginPath();\n            ctx.arc(center_x,center_y,radius,0,2*Math.PI);\n            ctx.stroke();\n\n            analyser.getByteFrequencyData(freqArr);\n\n            for(let i=0; i < bars; i++) {\n                let rads = Math.PI * 2 / bars;\n                let bar_height = 100;\n                let bar_width = 2;\n                let x = center_x + Math.cos(rads * i) * (radius);\n                let y = center_y + Math.sin(rads * i) * (radius);\n                let x_end = center_x + Math.cos(rads * i)*(radius + bar_height);\n                let y_end = center_y + Math.sin(rads * i)*(radius + bar_height);\n                drawBar(x, y, x_end, y_end, bar_width, freqArr[i], ctx);\n            }\n            window.requestAnimationFrame(animationLooper());\n        \n    }\n\n    const drawBar = (x1, y1, x2, y2, width,frequency, ctx) => {\n        \n        let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        ctx.strokeStyle = lineColor;\n        ctx.lineWidth = width;\n        ctx.beginPath();\n        ctx.moveTo(x1,y1);\n        ctx.lineTo(x2,y2);\n        ctx.stroke();\n    }\n    \n    return (\n        <Wrapper>\n            <CircleCanvas width=\"600\" height=\"600\" ref={ref}>\n                {/* <Circle />\n                <Bar /> */}\n                {/* {ctx && drawCircle()} */}\n                {/* {ctx && drawBars()} */}\n            </CircleCanvas>\n        </Wrapper>\n    )\n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}