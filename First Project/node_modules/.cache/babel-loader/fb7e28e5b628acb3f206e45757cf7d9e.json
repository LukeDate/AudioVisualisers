{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  // const [analyserState, setAnalyserState] = useState();\n  // const [freqArray, setFreqArray] = useState([]);\n  // const [audioState, setAudioState] = useState();\n  const [isplaying, setplaying] = useState(false); // function play() {\n  //     setplaying(true);\n  //     audio.play();\n  // }\n  // function pause() {\n  //     setplaying(false);\n  //     audio.pause();\n  // }\n  //audio context\n\n  let context = new AudioContext(); //create audio object from music file\n\n  let audio = new Audio(soundFile); //create an analysernode to view fft\n\n  let node = new AnalyserNode(context); //audio track media element source\n\n  let source = context.createMediaElementSource(audio); //this analyser node allows fast fourier transform\n\n  let analyser = context.createAnalyser(); // source.connect(analyser)\n\n  analyser.connect(context.destination);\n  analyser.sfftSize = 256;\n  let freq_array = new Uint8Array(analyser.frequencyBinCount);\n  analyser.getByteFrequencyData(freq_array);\n  let bufferLength = analyser.frequencyBinCount;\n  let dataArray = new Uint8Array(bufferLength);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Play Audio\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => pause(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Pause Audio\"), \" */}\", /*#__PURE__*/React.createElement(VisualDemo, {\n    isPlaying: isplaying,\n    analyser: analyser,\n    dataArray: freq_array,\n    bufferLength: analyser.frequencyBinCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","isplaying","setplaying","context","AudioContext","audio","Audio","node","AnalyserNode","source","createMediaElementSource","analyser","createAnalyser","connect","destination","sfftSize","freq_array","Uint8Array","frequencyBinCount","getByteFrequencyData","bufferLength","dataArray","play","pause"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,KAAD,CAAxC,CAN6B,CAS7B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA,MAAIQ,OAAO,GAAG,IAAIC,YAAJ,EAAd,CApB6B,CAsB7B;;AACA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUP,SAAV,CAAZ,CAvB6B,CAyB7B;;AACA,MAAIQ,IAAI,GAAG,IAAIC,YAAJ,CAAiBL,OAAjB,CAAX,CA1B6B,CA4B7B;;AACA,MAAIM,MAAM,GAAGN,OAAO,CAACO,wBAAR,CAAiCL,KAAjC,CAAb,CA7B6B,CA+B7B;;AACA,MAAIM,QAAQ,GAAGR,OAAO,CAACS,cAAR,EAAf,CAhC6B,CAmC7B;;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAiBV,OAAO,CAACW,WAAzB;AAGAH,EAAAA,QAAQ,CAACI,QAAT,GAAoB,GAApB;AACA,MAAIC,UAAU,GAAG,IAAIC,UAAJ,CAAeN,QAAQ,CAACO,iBAAxB,CAAjB;AACAP,EAAAA,QAAQ,CAACQ,oBAAT,CAA8BH,UAA9B;AACA,MAAII,YAAY,GAAGT,QAAQ,CAACO,iBAA5B;AACA,MAAIG,SAAS,GAAG,IAAIJ,UAAJ,CAAeG,YAAf,CAAhB;AAEA,sBACI,uDACI;AAAQ,IAAA,OAAO,EAAE,MAAME,IAAI,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,IAAA,OAAO,EAAE,MAAMC,KAAK,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,uBAGI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEtB,SAAvB;AAAkC,IAAA,QAAQ,EAAEU,QAA5C;AAAsD,IAAA,SAAS,EAAEK,UAAjE;AAA6E,IAAA,YAAY,EAAEL,QAAQ,CAACO,iBAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CArDD;;AAsDA,eAAelB,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    // const [analyserState, setAnalyserState] = useState();\n    // const [freqArray, setFreqArray] = useState([]);\n    // const [audioState, setAudioState] = useState();\n\n    const [isplaying, setplaying] = useState(false);\n\n\n    // function play() {\n    //     setplaying(true);\n    //     audio.play();\n    // }\n\n    // function pause() {\n    //     setplaying(false);\n    //     audio.pause();\n    // }\n\n    //audio context\n    let context = new AudioContext();\n\n    //create audio object from music file\n    let audio = new Audio(soundFile);\n    \n    //create an analysernode to view fft\n    let node = new AnalyserNode(context);\n\n    //audio track media element source\n    let source = context.createMediaElementSource(audio);\n\n    //this analyser node allows fast fourier transform\n    let analyser = context.createAnalyser();\n        \n\n    // source.connect(analyser)\n\n    analyser.connect(context.destination);\n\n\n    analyser.sfftSize = 256;\n    let freq_array = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(freq_array)\n    let bufferLength = analyser.frequencyBinCount;\n    let dataArray = new Uint8Array(bufferLength);\n\n    return(\n        <>\n            <button onClick={() => play()}>Play Audio</button>\n            <button onClick={() => pause()}>Pause Audio</button> */}\n            <VisualDemo isPlaying={isplaying} analyser={analyser} dataArray={freq_array} bufferLength={analyser.frequencyBinCount} />\n        </>\n    )\n}\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}