{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  // const [analyserState, setAnalyserState] = useState();\n  // const [freqArray, setFreqArray] = useState([]);\n  // const [audioState, setAudioState] = useState();\n  const [isplaying, setplaying] = useState(false);\n\n  function play() {\n    setplaying(true);\n    audio.play();\n  }\n\n  function pause() {\n    setplaying(false);\n    audio.pause();\n  } //audio context\n\n\n  let context = new AudioContext(); //create audio object from music file\n\n  let audio = new Audio(soundFile); //create an analysernode to view fft\n  // let node = new AnalyserNode(context);\n  //audio track media element source\n  // let source = context.createMediaElementSource(audio);\n  //this analyser node allows fast fourier transform\n  // let analyser = context.createAnalyser();\n  // source.connect(analyser)\n  // analyser.connect(context.destination);\n  // analyser.fftSize = 256;\n  // let freq_array = new Uint8Array(analyser.frequencyBinCount);\n  // analyser.getByteFrequencyData(freq_array)\n  // let bufferLength = analyser.frequencyBinCount;\n  // let dataArray = new Uint8Array(bufferLength);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Play Audio\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => pause(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Pause Audio\"));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","isplaying","setplaying","play","audio","pause","context","AudioContext","Audio"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;;AAGA,WAASQ,IAAT,GAAgB;AACZD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,KAAK,CAACD,IAAN;AACH;;AAED,WAASE,KAAT,GAAiB;AACbH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,KAAK,CAACC,KAAN;AACH,GAjB4B,CAmB7B;;;AACA,MAAIC,OAAO,GAAG,IAAIC,YAAJ,EAAd,CApB6B,CAsB7B;;AACA,MAAIH,KAAK,GAAG,IAAII,KAAJ,CAAUT,SAAV,CAAZ,CAvB6B,CAyB7B;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;;AAEA,sBACI,uDACI;AAAQ,IAAA,OAAO,EAAE,MAAMI,IAAI,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,IAAA,OAAO,EAAE,MAAME,KAAK,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,CADJ;AAOH,CArDD;;AAsDA,eAAeL,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    // const [analyserState, setAnalyserState] = useState();\n    // const [freqArray, setFreqArray] = useState([]);\n    // const [audioState, setAudioState] = useState();\n\n    const [isplaying, setplaying] = useState(false);\n\n\n    function play() {\n        setplaying(true);\n        audio.play();\n    }\n\n    function pause() {\n        setplaying(false);\n        audio.pause();\n    }\n\n    //audio context\n    let context = new AudioContext();\n\n    //create audio object from music file\n    let audio = new Audio(soundFile);\n    \n    //create an analysernode to view fft\n    // let node = new AnalyserNode(context);\n\n    //audio track media element source\n    // let source = context.createMediaElementSource(audio);\n\n    //this analyser node allows fast fourier transform\n    // let analyser = context.createAnalyser();\n        \n\n    // source.connect(analyser)\n\n    // analyser.connect(context.destination);\n\n\n    // analyser.fftSize = 256;\n    // let freq_array = new Uint8Array(analyser.frequencyBinCount);\n    // analyser.getByteFrequencyData(freq_array)\n    // let bufferLength = analyser.frequencyBinCount;\n    // let dataArray = new Uint8Array(bufferLength);\n\n    return(\n        <>\n            <button onClick={() => play()}>Play Audio</button>\n            <button onClick={() => pause()}>Pause Audio</button>\n            {/* <VisualDemo isPlaying={isplaying} analyser={analyser} dataArray={freq_array} bufferLength={analyser.frequencyBinCount} /> */}\n        </>\n    )\n}\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}