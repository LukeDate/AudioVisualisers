{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nclass CircleContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      analyser: '',\n      freqArray: []\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateCanvas(this.canvasRef);\n    let audio = new Audio();\n    let context = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = context.createAnalyser();\n    let freqArr = new Uint8Array(analyser.frequencyBitCount);\n    this.setState({\n      analyser: analyser,\n      freqArray: freqArr\n    });\n    audio.src = \"/it_came_from_china.mp3\";\n    let source = context.createMediaElementSource(audio);\n    source.connect(analyser);\n    analyser.connect(context.destination); // audio.play();\n    // animationLooper(analyser, freqArr);\n  }\n\n  drawBar(x1, y1, x2, y2, width, ctx) {\n    // let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    // ctx.strokeStyle = lineColor;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n\n  updateCanvas(canvas) {\n    const bars = 200;\n    const radius = 150;\n    const center_x = 300;\n    const center_y = 300;\n    const ctx = canvas.current.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.arc(center_x, center_y, 150, 0, 2 * Math.PI);\n    ctx.stroke();\n    console.log(this.state);\n    this.state.analyser.getByteFrequencyData(this.state.freqArray);\n\n    for (let i = 0; i < bars; i++) {\n      let rads = Math.PI * 2 / bars;\n      let bar_height = 100;\n      let bar_width = 2;\n      let x = center_x + Math.cos(rads * i) * radius;\n      let y = center_y + Math.sin(rads * i) * radius;\n      let x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      let y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n      this.drawBar(x, y, x_end, y_end, bar_width, ctx);\n    } // window.requestAnimationFrame(this.updateCanvas(canvas));\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CircleCanvas, {\n      width: \"600\",\n      height: \"600\",\n      ref: this.canvasRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","styled","Wrapper","CircleCanvas","CircleContainer","Component","constructor","props","state","analyser","freqArray","canvasRef","createRef","componentDidMount","updateCanvas","audio","Audio","context","window","AudioContext","webkitAudioContext","createAnalyser","freqArr","Uint8Array","frequencyBitCount","setState","src","source","createMediaElementSource","connect","destination","drawBar","x1","y1","x2","y2","width","ctx","lineWidth","beginPath","moveTo","lineTo","stroke","canvas","bars","radius","center_x","center_y","current","getContext","arc","Math","PI","console","log","getByteFrequencyData","i","rads","bar_height","bar_width","x","cos","y","sin","x_end","y_end","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nclass CircleContainer extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            analyser: '',\n            freqArray: []\n         };\n        this.canvasRef = React.createRef()\n      }\n\n    componentDidMount() {\n        this.updateCanvas(this.canvasRef)\n        let audio = new Audio();\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n        let analyser = context.createAnalyser();\n        let freqArr = new Uint8Array(analyser.frequencyBitCount);\n        this.setState({\n            analyser: analyser,\n            freqArray: freqArr\n        })\n        audio.src = \"/it_came_from_china.mp3\";\n        let source = context.createMediaElementSource(audio);\n        source.connect(analyser);\n        analyser.connect(context.destination);\n        // audio.play();\n        // animationLooper(analyser, freqArr);\n    }\n\n    drawBar(x1, y1, x2, y2, width, ctx) {\n        // let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        // ctx.strokeStyle = lineColor;\n        ctx.lineWidth = width;\n        ctx.beginPath();\n        ctx.moveTo(x1,y1);\n        ctx.lineTo(x2,y2);\n        ctx.stroke();\n    }\n\n    updateCanvas(canvas) {\n        const bars = 200;\n        const radius = 150;\n        const center_x = 300;\n        const center_y = 300;\n        const ctx = canvas.current.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.arc(center_x, center_y, 150, 0, 2*Math.PI);\n        ctx.stroke();\n        console.log(this.state)\n        this.state.analyser.getByteFrequencyData(this.state.freqArray);\n\n        for(let i=0; i < bars; i++) {\n            let rads = Math.PI * 2 / bars;\n            let bar_height = 100;\n            let bar_width = 2;\n            let x = center_x + Math.cos(rads * i) * (radius);\n            let y = center_y + Math.sin(rads * i) * (radius);\n            let x_end = center_x + Math.cos(rads * i)*(radius + bar_height);\n            let y_end = center_y + Math.sin(rads * i)*(radius + bar_height);\n            this.drawBar(x, y, x_end, y_end, bar_width, ctx);\n        }\n        // window.requestAnimationFrame(this.updateCanvas(canvas));\n\n    }\n\n\n    render() {\n        return (\n            <Wrapper>\n                <CircleCanvas width=\"600\" height=\"600\" ref={this.canvasRef} />\n            </Wrapper>\n        )\n    }\n     \n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}