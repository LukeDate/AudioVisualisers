{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  let frequencyBandArray = [...Array(25).keys()];\n  const amplitudeValues = useRef(null);\n  const amplitudeArray = new Uint8Array(32);\n  const [audioData, setAudioData] = useState([]);\n  const [songFile, setSongFile] = useState();\n  const [frequencyData, setFreqData] = useState([]);\n  useEffect(() => {}, []);\n\n  const getFrequencyData = audio => {\n    console.log('passed into func', audio);\n    const bufferLength = audio.frequencyBinCount;\n    audio.getByteFrequencyData(amplitudeArray); // styleAdjuster(amplitudeArray);\n  };\n\n  const useComponentWillMount = func => {\n    const willMount = useRef(true);\n\n    if (willMount.current) {\n      func();\n    }\n\n    willMount.current = false;\n  };\n\n  useComponentWillMount(() => {\n    console.log(\"i ran first\");\n    const audioFile = new Audio();\n    audioFile.src = soundFile;\n    setSongFile(audioFile);\n    const audioContext = new AudioContext();\n    const source = audioContext.createMediaElementSource(audioFile);\n    let analyser = audioContext.createAnalyser();\n    analyser.fftSize = 64;\n    source.connect(audioContext.destination);\n    source.connect(analyser);\n    setAudioData(analyser);\n    console.log('frequency func', getFrequencyData(analyser));\n    setFreqData(getFrequencyData(analyser));\n    console.log(analyser);\n    console.log('I ran last');\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => songFile.play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"PLAY DA SONG\"), console.log('audio data: ', audioData, 'frequency data: ', frequencyData));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","frequencyBandArray","Array","keys","amplitudeValues","amplitudeArray","Uint8Array","audioData","setAudioData","songFile","setSongFile","frequencyData","setFreqData","getFrequencyData","audio","console","log","bufferLength","frequencyBinCount","getByteFrequencyData","useComponentWillMount","func","willMount","current","audioFile","Audio","src","audioContext","AudioContext","source","createMediaElementSource","analyser","createAnalyser","fftSize","connect","destination","play"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B,MAAIC,kBAAkB,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAJ,CAAzB;AACA,QAAMC,eAAe,GAAGP,MAAM,CAAC,IAAD,CAA9B;AACA,QAAMQ,cAAc,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAvB;AAGA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,EAAxC;AACA,QAAM,CAACgB,aAAD,EAAgBC,WAAhB,IAA+BjB,QAAQ,CAAC,EAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMiB,gBAAgB,GAAIC,KAAD,IAAW;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC;AACA,UAAMG,YAAY,GAAGH,KAAK,CAACI,iBAA3B;AAEAJ,IAAAA,KAAK,CAACK,oBAAN,CAA2Bd,cAA3B,EAJgC,CAKhC;AACH,GAND;;AAQA,QAAMe,qBAAqB,GAAGC,IAAI,IAAI;AAClC,UAAMC,SAAS,GAAGzB,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAIyB,SAAS,CAACC,OAAd,EAAuB;AACrBF,MAAAA,IAAI;AACL;;AAEDC,IAAAA,SAAS,CAACC,OAAV,GAAoB,KAApB;AACD,GARH;;AAUAH,EAAAA,qBAAqB,CAAC,MAAM;AACxBL,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMQ,SAAS,GAAG,IAAIC,KAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,GAAV,GAAgB3B,SAAhB;AACAW,IAAAA,WAAW,CAACc,SAAD,CAAX;AACA,UAAMG,YAAY,GAAG,IAAIC,YAAJ,EAArB;AACA,UAAMC,MAAM,GAAGF,YAAY,CAACG,wBAAb,CAAsCN,SAAtC,CAAf;AACA,QAAIO,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AACAD,IAAAA,QAAQ,CAACE,OAAT,GAAmB,EAAnB;AACAJ,IAAAA,MAAM,CAACK,OAAP,CAAeP,YAAY,CAACQ,WAA5B;AACAN,IAAAA,MAAM,CAACK,OAAP,CAAeH,QAAf;AACAvB,IAAAA,YAAY,CAACuB,QAAD,CAAZ;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,gBAAgB,CAACkB,QAAD,CAA9C;AACAnB,IAAAA,WAAW,CAACC,gBAAgB,CAACkB,QAAD,CAAjB,CAAX;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,GAhBoB,CAArB;AAuBA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAE,MAAMP,QAAQ,CAAC2B,IAAT,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGKrB,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BT,SAA5B,EAAuC,kBAAvC,EAA2DI,aAA3D,CAHL,CADJ;AAOH,CA/DD;;AAiEA,eAAeX,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    let frequencyBandArray = [...Array(25).keys()];\n    const amplitudeValues = useRef(null);\n    const amplitudeArray = new Uint8Array(32);\n\n\n    const [audioData, setAudioData] = useState([]);\n    const [songFile, setSongFile] = useState();\n    const [frequencyData, setFreqData] = useState([]);\n\n    useEffect(() => {\n        \n    }, []);\n    \n    const getFrequencyData = (audio) => {\n        console.log('passed into func', audio);\n        const bufferLength = audio.frequencyBinCount;\n\n        audio.getByteFrequencyData(amplitudeArray);\n        // styleAdjuster(amplitudeArray);\n    }\n\n    const useComponentWillMount = func => {\n        const willMount = useRef(true);\n      \n        if (willMount.current) {\n          func();\n        }\n      \n        willMount.current = false;\n      };\n\n    useComponentWillMount(() => {\n        console.log(\"i ran first\")\n        const audioFile = new Audio();\n        audioFile.src = soundFile;\n        setSongFile(audioFile);\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaElementSource(audioFile);\n        let analyser = audioContext.createAnalyser();\n        analyser.fftSize = 64;\n        source.connect(audioContext.destination);\n        source.connect(analyser);\n        setAudioData(analyser);\n        console.log('frequency func', getFrequencyData(analyser));\n        setFreqData(getFrequencyData(analyser));\n        console.log(analyser);\n        console.log('I ran last')\n    }\n    )\n \n    \n\n\n\n    return (\n        <div>\n            <button onClick={() => songFile.play()}>PLAY DA SONG</button>\n            {/* {console.log('Freq data func', getFrequencyData())} */}\n            {console.log('audio data: ', audioData, 'frequency data: ', frequencyData )}\n        </div>\n    );\n}\n\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}