{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  // const [analyserState, setAnalyserState] = useState();\n  // const [freqArray, setFreqArray] = useState([]);\n  // const [audioState, setAudioState] = useState();\n  const [isplaying, setplaying] = useState(false);\n\n  function play() {\n    setplaying(true);\n    audio.play();\n  }\n\n  function pause() {\n    setplaying(false);\n    audio.pause();\n  } //audio context\n\n\n  let context = new AudioContext(); //create audio object from music file\n\n  let audio = new Audio(soundFile); //create an analysernode to view fft\n\n  let node = new AnalyserNode(context); //audio track media element source\n\n  let source = context.createMediaElementSource(audio); //this analyser node allows fast fourier transform\n\n  let analyser = context.createAnalyser();\n  console.log(audio);\n  source.connect(analyser);\n  analyser.connect(context.destination);\n  analyser.sfftSize = 256;\n  let freq_array = new Uint8Array(analyser.frequencyBinCount);\n  analyser.getByteFrequencyData(freq_array); // let bufferLength = analyser.frequencyBinCount;\n  // let dataArray = new Uint8Array(bufferLength);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(VisualDemo, {\n    isPlaying: isplaying,\n    analyser: analyser,\n    dataArray: freq_array,\n    bufferLength: analyser.frequencyBinCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }\n  }));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","isplaying","setplaying","play","audio","pause","context","AudioContext","Audio","node","AnalyserNode","source","createMediaElementSource","analyser","createAnalyser","console","log","connect","destination","sfftSize","freq_array","Uint8Array","frequencyBinCount","getByteFrequencyData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;;AAGA,WAASQ,IAAT,GAAgB;AACZD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,KAAK,CAACD,IAAN;AACH;;AAED,WAASE,KAAT,GAAiB;AACbH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,KAAK,CAACC,KAAN;AACH,GAjB4B,CAmB7B;;;AACA,MAAIC,OAAO,GAAG,IAAIC,YAAJ,EAAd,CApB6B,CAsB7B;;AACA,MAAIH,KAAK,GAAG,IAAII,KAAJ,CAAUT,SAAV,CAAZ,CAvB6B,CAyB7B;;AACA,MAAIU,IAAI,GAAG,IAAIC,YAAJ,CAAiBJ,OAAjB,CAAX,CA1B6B,CA4B7B;;AACA,MAAIK,MAAM,GAAGL,OAAO,CAACM,wBAAR,CAAiCR,KAAjC,CAAb,CA7B6B,CA+B7B;;AACA,MAAIS,QAAQ,GAAGP,OAAO,CAACQ,cAAR,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAO,EAAAA,MAAM,CAACM,OAAP,CAAeJ,QAAf;AAEAA,EAAAA,QAAQ,CAACI,OAAT,CAAiBX,OAAO,CAACY,WAAzB;AAGAL,EAAAA,QAAQ,CAACM,QAAT,GAAoB,GAApB;AACA,MAAIC,UAAU,GAAG,IAAIC,UAAJ,CAAeR,QAAQ,CAACS,iBAAxB,CAAjB;AACAT,EAAAA,QAAQ,CAACU,oBAAT,CAA8BH,UAA9B,EA1C6B,CA2C7B;AACA;;AAEA,sBACI,uDACK,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEnB,SAAvB;AAAkC,IAAA,QAAQ,EAAEY,QAA5C;AAAsD,IAAA,SAAS,EAAEO,UAAjE;AAA6E,IAAA,YAAY,EAAEP,QAAQ,CAACS,iBAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,CADJ;AAKH,CAnDD;;AAoDA,eAAetB,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    // const [analyserState, setAnalyserState] = useState();\n    // const [freqArray, setFreqArray] = useState([]);\n    // const [audioState, setAudioState] = useState();\n\n    const [isplaying, setplaying] = useState(false);\n\n\n    function play() {\n        setplaying(true);\n        audio.play();\n    }\n\n    function pause() {\n        setplaying(false);\n        audio.pause();\n    }\n\n    //audio context\n    let context = new AudioContext();\n\n    //create audio object from music file\n    let audio = new Audio(soundFile);\n    \n    //create an analysernode to view fft\n    let node = new AnalyserNode(context);\n\n    //audio track media element source\n    let source = context.createMediaElementSource(audio);\n\n    //this analyser node allows fast fourier transform\n    let analyser = context.createAnalyser();\n        \n    console.log(audio)\n    source.connect(analyser)\n\n    analyser.connect(context.destination);\n\n\n    analyser.sfftSize = 256;\n    let freq_array = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(freq_array)\n    // let bufferLength = analyser.frequencyBinCount;\n    // let dataArray = new Uint8Array(bufferLength);\n\n    return(\n        <>\n            {<VisualDemo isPlaying={isplaying} analyser={analyser} dataArray={freq_array} bufferLength={analyser.frequencyBinCount} />}\n        </>\n    )\n}\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}