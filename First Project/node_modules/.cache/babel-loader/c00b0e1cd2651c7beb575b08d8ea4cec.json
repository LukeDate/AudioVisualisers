{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom'; // import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport '../App.css';\nimport Canvas from './canvas';\n\nconst VisualDemo = ({ ...props\n}) => {\n  const [canvas, setCanvasRef] = useState();\n  let Ref = useRef(); // let canvas = document.querySelector(\"#canvas\");\n\n  useEffect(() => {\n    setCanvasRef(Ref.current);\n  }, []); // function renderFrame() {\n  //   // React.createElement()\n  //   // let canvas = document.querySelector(\"#canvas\");\n  //   let canvas = React.createElement('canvas', {});\n  //   console.log(canvas);\n  //   requestAnimationFrame(renderFrame);\n  //   // canvas.width = window.innerWidth;\n  //   // canvas.height = window.innerHeight;\n  //   props.analyser.getByteFrequencyData(props.dataArray);\n  //   let ctx = canvas.getContext('2d');\n  //   // let width = canvas.width;\n  //   // let height = canvas.height;\n  //   let barWidth = (750 / props.bufferLength) * 2.5;\n  //   let barHeight;\n  //   let x = 0;\n  //   // ctx.fillStyle = \"#000\";\n  //   ctx.fillRect(0, 0, 750, 200);\n  //   x=0;\n  //   for(let i=0; i < props.bufferLength; i++){\n  //     barHeight = props.dataArray[i];\n  //     let r = barHeight + (25 * (i/props.bufferLength));\n  //     let g = 250 * (i/props.bufferLength);\n  //     let b = 50;\n  //     ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n  //     ctx.fillRect(x, 200 - barHeight, barWidth, barHeight);\n  //     x += barWidth + 1;\n  //   }\n  // }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: Ref,\n    height: 200,\n    width: 750,\n    id: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, canvas && /*#__PURE__*/React.createElement(Canvas, {\n    canvas: canvas,\n    bufferLength: props.bufferLength,\n    dataArray: props.dataArray,\n    analyser: props.analyser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"test\",\n    onClick: () => props.play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Play Audio\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.pause(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Pause Audio\"));\n};\n\nexport default VisualDemo;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js"],"names":["React","useRef","useEffect","useState","ReactDOM","Canvas","VisualDemo","props","canvas","setCanvasRef","Ref","current","bufferLength","dataArray","analyser","play","pause"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AAEjC,QAAM,CAACC,MAAD,EAASC,YAAT,IAAyBN,QAAQ,EAAvC;AACA,MAAIO,GAAG,GAAGT,MAAM,EAAhB,CAHiC,CAIjC;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACC,GAAG,CAACC,OAAL,CAAZ;AACD,GAFQ,EAEN,EAFM,CAAT,CANiC,CASjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE,uDACE;AAAQ,IAAA,GAAG,EAAED,GAAb;AAAkB,IAAA,MAAM,EAAE,GAA1B;AAA+B,IAAA,KAAK,EAAE,GAAtC;AAA2C,IAAA,EAAE,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGF,MAAM,iBAAI,oBAAC,MAAD;AACT,IAAA,MAAM,EAAEA,MADC;AAET,IAAA,YAAY,EAAED,KAAK,CAACK,YAFX;AAGT,IAAA,SAAS,EAAEL,KAAK,CAACM,SAHR;AAIX,IAAA,QAAQ,EAAEN,KAAK,CAACO,QAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFb,CADF,eASE;AAAQ,IAAA,SAAS,EAAC,MAAlB;AAAyB,IAAA,OAAO,EAAE,MAAMP,KAAK,CAACQ,IAAN,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,eAUE;AAAQ,IAAA,OAAO,EAAE,MAAMR,KAAK,CAACS,KAAN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVF,CADF;AAcD,CArDD;;AAuDA,eAAeV,UAAf","sourcesContent":["import React, { useRef, useEffect, useState }  from 'react';\nimport ReactDOM from 'react-dom';\n// import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\nimport Canvas from './canvas';\n\nconst VisualDemo = ({...props}) => {\n\n  const [canvas, setCanvasRef] = useState();\n  let Ref = useRef();\n  // let canvas = document.querySelector(\"#canvas\");\n\n  useEffect(() => {\n    setCanvasRef(Ref.current);\n  }, []);\n  // function renderFrame() {\n  //   // React.createElement()\n  //   // let canvas = document.querySelector(\"#canvas\");\n  //   let canvas = React.createElement('canvas', {});\n  //   console.log(canvas);\n  //   requestAnimationFrame(renderFrame);\n  //   // canvas.width = window.innerWidth;\n  //   // canvas.height = window.innerHeight;\n  //   props.analyser.getByteFrequencyData(props.dataArray);\n    \n  //   let ctx = canvas.getContext('2d');\n  //   // let width = canvas.width;\n  //   // let height = canvas.height;\n    \n  //   let barWidth = (750 / props.bufferLength) * 2.5;\n  //   let barHeight;\n  //   let x = 0;\n  //   // ctx.fillStyle = \"#000\";\n  //   ctx.fillRect(0, 0, 750, 200);\n  //   x=0;\n  //   for(let i=0; i < props.bufferLength; i++){\n  //     barHeight = props.dataArray[i];\n  //     let r = barHeight + (25 * (i/props.bufferLength));\n  //     let g = 250 * (i/props.bufferLength);\n  //     let b = 50;\n  //     ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n  //     ctx.fillRect(x, 200 - barHeight, barWidth, barHeight);\n  //     x += barWidth + 1;\n  //   }\n  // }\n  return (\n    <>\n      <canvas ref={Ref} height={200} width={750} id=\"canvas\">\n        {/* {renderFrame()} */}\n        {canvas && <Canvas \n          canvas={canvas} \n          bufferLength={props.bufferLength}\n          dataArray={props.dataArray}\n        analyser={props.analyser}/>}\n      </canvas>\n      <button className=\"test\" onClick={() => props.play()}>Play Audio</button>\n      <button onClick={() => props.pause()}>Pause Audio</button>\n    </>\n  )\n}\n\nexport default VisualDemo;"]},"metadata":{},"sourceType":"module"}