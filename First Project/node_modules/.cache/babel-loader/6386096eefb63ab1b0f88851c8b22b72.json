{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport song from '../music/it_comes_from_china.ogg';\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\nlet ctx, x_end, y_end, bar_height;\nconst width = window.innerWidth;\nconst height = window.innerHeight;\nconst bars = 200;\nconst bar_width = 1;\nconst radius = 80;\nconst center_x = width / 2;\nconst center_y = height / 2;\n\nclass CircleContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tick = () => {\n      this.animationLooper(this.canvas.current);\n      this.analyser.getByteTimeDomainData(this.frequency_array);\n      this.rafId = requestAnimationFrame(this.tick);\n    };\n\n    this.audio = new Audio(song);\n    this.canvas = React.createRef();\n    this.state = {\n      analyser: '',\n      freqArray: [],\n      audio: {}\n    };\n  }\n\n  componentDidMount() {\n    this.context = new (window.AudioContext || window.webkitAudioContext)();\n    this.source = this.context.createMediaElementSource(this.audio);\n    this.analyser = this.context.createAnalyser();\n    this.source.connect(this.analyser);\n    this.analyser.connect(this.context.destination);\n    this.frequency_array = new Uint8Array(this.analyser.frequencyBinCount);\n  }\n\n  animationLooper(canvas) {\n    canvas.width = width;\n    canvas.height = height;\n    ctx = canvas.getContext(\"2d\");\n\n    for (var i = 0; i < bars; i++) {\n      //divide a circle into equal part\n      const rads = Math.PI * 2 / bars; // Math is magical\n\n      bar_height = this.frequency_array[i] * 2;\n      const x = center_x + Math.cos(rads * i) * radius;\n      const y = center_y + Math.sin(rads * i) * radius;\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height); //draw a bar\n\n      this.drawBar(x, y, x_end, y_end, this.frequency_array[i], ctx, canvas);\n    }\n  }\n\n  drawBar(x1 = 0, y1 = 0, x2 = 0, y2 = 0, frequency, ctx, canvas) {\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n    gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\n    gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\n    ctx.fillStyle = gradient;\n    const lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = bar_width;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n\n  togglePlay() {\n    console.log(this.audio);\n\n    if (this.audio.paused) {\n      this.audio.play();\n      this.rafId = requestAnimationFrame(this.tick);\n    } else {\n      this.audio.pause();\n      cancelAnimationFrame(this.rafId);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvas,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.togglePlay.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 16\n      }\n    }, \"Play/Pause\"));\n  }\n\n}\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","styled","song","Wrapper","CircleCanvas","ctx","x_end","y_end","bar_height","width","window","innerWidth","height","innerHeight","bars","bar_width","radius","center_x","center_y","CircleContainer","Component","constructor","props","tick","animationLooper","canvas","current","analyser","getByteTimeDomainData","frequency_array","rafId","requestAnimationFrame","audio","Audio","createRef","state","freqArray","componentDidMount","context","AudioContext","webkitAudioContext","source","createMediaElementSource","createAnalyser","connect","destination","Uint8Array","frequencyBinCount","getContext","i","rads","Math","PI","x","cos","y","sin","drawBar","x1","y1","x2","y2","frequency","gradient","createLinearGradient","addColorStop","fillStyle","lineColor","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","togglePlay","console","log","paused","play","pause","cancelAnimationFrame","render","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport song from '../music/it_comes_from_china.ogg';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nlet ctx, x_end, y_end, bar_height;\nconst width = window.innerWidth;\nconst height = window.innerHeight;\nconst bars = 200;\nconst bar_width = 1;\nconst radius = 80;\nconst center_x = width / 2;\nconst center_y = height / 2;\n\nclass CircleContainer extends React.Component{\n    constructor(props) {\n        super(props);\n        this.audio = new Audio(song);\n        this.canvas = React.createRef()\n        this.state = {\n            analyser: '',\n            freqArray: [],\n            audio: {}\n         };\n    }\n\n    componentDidMount() {\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n        this.source = this.context.createMediaElementSource(this.audio);\n\n        this.analyser = this.context.createAnalyser();\n        this.source.connect(this.analyser);\n        this.analyser.connect(this.context.destination);\n        this.frequency_array = new Uint8Array(this.analyser.frequencyBinCount);\n    }\n\n    animationLooper(canvas) {\n        canvas.width = width;\n        canvas.height = height;\n        ctx = canvas.getContext(\"2d\");\n\n        for (var i = 0; i < bars; i++) {\n            //divide a circle into equal part\n            const rads = Math.PI * 2 / bars;\n\n            // Math is magical\n            bar_height = this.frequency_array[i] * 2;\n\n            const x = center_x + Math.cos(rads * i) * (radius);\n            const y = center_y + Math.sin(rads * i) * (radius);\n            x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n            y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n\n            //draw a bar\n            this.drawBar(x, y, x_end, y_end, this.frequency_array[i], ctx, canvas);\n        }\n     }\n\n     drawBar(x1=0, y1=0, x2=0, y2=0, frequency, ctx, canvas) {\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n        gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\n        gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\n        ctx.fillStyle = gradient;\n\n        const lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        ctx.strokeStyle = lineColor;\n        ctx.lineWidth = bar_width;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n    }\n\n    tick = () => {\n        this.animationLooper(this.canvas.current);\n        this.analyser.getByteTimeDomainData(this.frequency_array);\n        this.rafId = requestAnimationFrame(this.tick);\n    }\n\n    togglePlay() {\n        \n        console.log(this.audio);\n        \n        if(this.audio.paused) {\n            this.audio.play()\n            this.rafId = requestAnimationFrame(this.tick);\n          } else {\n            this.audio.pause();\n            cancelAnimationFrame(this.rafId);\n          }\n    }\n\n    render() {\n        return (\n            <Wrapper>\n                <canvas ref={this.canvas} />\n               <button onClick={this.togglePlay.bind(this)}>Play/Pause</button>\n            </Wrapper>\n        )\n    }\n     \n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}