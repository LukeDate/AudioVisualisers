{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  let frequencyBandArray = [...Array(25).keys()];\n  const amplitudeValues = useRef(null);\n  const amplitudeArray = new Uint8Array(bufferLength);\n  const [audioData, setAudioData] = useState([]);\n  const [songFile, setSongFile] = useState();\n  useEffect(() => {\n    const audioFile = new Audio();\n    setSongFile(audioFile);\n    const audioContext = new AudioContext();\n    const source = audioContext.createMediaElementSource(audioFile);\n    const analyser = audioContext.createAnalyser();\n    audioFile.src = soundFile;\n    analyser.fftSize = 64;\n    source.connect(audioContext.destination);\n    source.connect(analyser);\n    setAudioData(analyser);\n  }, []);\n\n  const getFrequencyData = styleAdjuster => {\n    const bufferLength = audioData && audioData.frequencyBinCount;\n    audioData && audioData.getByteFrequencyData(amplitudeArray);\n    styleAdjuster(amplitudeArray);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => songFile.play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"PLAY DA SONG\"), console.log('freq', new Uint8Array(32)), console.log(amplitudeValues), console.log('data', audioData.getByteFrequencyData(amplitudeArray)));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","frequencyBandArray","Array","keys","amplitudeValues","amplitudeArray","Uint8Array","bufferLength","audioData","setAudioData","songFile","setSongFile","audioFile","Audio","audioContext","AudioContext","source","createMediaElementSource","analyser","createAnalyser","src","fftSize","connect","destination","getFrequencyData","styleAdjuster","frequencyBinCount","getByteFrequencyData","play","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B,MAAIC,kBAAkB,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAJ,CAAzB;AACA,QAAMC,eAAe,GAAGP,MAAM,CAAC,IAAD,CAA9B;AACA,QAAMQ,cAAc,GAAG,IAAIC,UAAJ,CAAeC,YAAf,CAAvB;AAGA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,EAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMgB,SAAS,GAAG,IAAIC,KAAJ,EAAlB;AACAF,IAAAA,WAAW,CAACC,SAAD,CAAX;AACA,UAAME,YAAY,GAAG,IAAIC,YAAJ,EAArB;AACA,UAAMC,MAAM,GAAGF,YAAY,CAACG,wBAAb,CAAsCL,SAAtC,CAAf;AACA,UAAMM,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAjB;AACAP,IAAAA,SAAS,CAACQ,GAAV,GAAgBrB,SAAhB;AACAmB,IAAAA,QAAQ,CAACG,OAAT,GAAmB,EAAnB;AACAL,IAAAA,MAAM,CAACM,OAAP,CAAeR,YAAY,CAACS,WAA5B;AACAP,IAAAA,MAAM,CAACM,OAAP,CAAeJ,QAAf;AACAT,IAAAA,YAAY,CAACS,QAAD,CAAZ;AAEH,GAZQ,EAYN,EAZM,CAAT;;AAiBA,QAAMM,gBAAgB,GAAIC,aAAD,IAAmB;AACxC,UAAMlB,YAAY,GAAGC,SAAS,IAAIA,SAAS,CAACkB,iBAA5C;AAEAlB,IAAAA,SAAS,IAAIA,SAAS,CAACmB,oBAAV,CAA+BtB,cAA/B,CAAb;AACAoB,IAAAA,aAAa,CAACpB,cAAD,CAAb;AACH,GALD;;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAE,MAAMK,QAAQ,CAACkB,IAAT,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGKC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,IAAIxB,UAAJ,CAAe,EAAf,CAApB,CAHL,EAIKuB,OAAO,CAACC,GAAR,CAAY1B,eAAZ,CAJL,EAKKyB,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBtB,SAAS,CAACmB,oBAAV,CAA+BtB,cAA/B,CAApB,CALL,CADJ;AASH,CA3CD;;AA6CA,eAAeL,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    let frequencyBandArray = [...Array(25).keys()];\n    const amplitudeValues = useRef(null);\n    const amplitudeArray = new Uint8Array(bufferLength);\n\n\n    const [audioData, setAudioData] = useState([]);\n    const [songFile, setSongFile] = useState();\n\n    useEffect(() => {\n        const audioFile = new Audio();\n        setSongFile(audioFile);\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaElementSource(audioFile);\n        const analyser = audioContext.createAnalyser();\n        audioFile.src = soundFile;\n        analyser.fftSize = 64;\n        source.connect(audioContext.destination);\n        source.connect(analyser);\n        setAudioData(analyser);\n\n    }, []);\n \n    \n\n\n    const getFrequencyData = (styleAdjuster) => {\n        const bufferLength = audioData && audioData.frequencyBinCount;\n\n        audioData && audioData.getByteFrequencyData(amplitudeArray);\n        styleAdjuster(amplitudeArray);\n    }\n\n    return (\n        <div>\n            <button onClick={() => songFile.play()}>PLAY DA SONG</button>\n            {/* Audio data: {audioData} */}\n            {console.log('freq', new Uint8Array(32))}\n            {console.log(amplitudeValues)}\n            {console.log('data', audioData.getByteFrequencyData(amplitudeArray))}\n        </div>\n    );\n}\n\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}