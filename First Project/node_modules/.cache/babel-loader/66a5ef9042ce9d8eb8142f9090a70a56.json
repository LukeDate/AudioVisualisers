{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  let frequencyBandArray = [...Array(25).keys()];\n  const amplitudeValues = useRef(null);\n  const amplitudeArray = new Uint8Array(32);\n  const [audioData, setAudioData] = useState([]);\n  const [songFile, setSongFile] = useState();\n  useEffect(() => {}, []);\n\n  const useComponentWillMount = func => {\n    const willMount = useRef(true);\n\n    if (willMount.current) {\n      func();\n    }\n\n    willMount.current = false;\n  };\n\n  useComponentWillMount(() => {\n    const audioFile = new Audio();\n    setSongFile(audioFile);\n    const audioContext = new AudioContext();\n    const source = audioContext.createMediaElementSource(audioFile);\n    let analyser = audioContext.createAnalyser();\n    audioFile.src = soundFile;\n    analyser.fftSize = 64;\n    source.connect(audioContext.destination);\n    source.connect(analyser);\n    return setAudioData(analyser);\n  });\n\n  const getFrequencyData = styleAdjuster => {\n    const bufferLength = audioData.frequencyBinCount;\n    audioData && audioData.getByteFrequencyData(amplitudeArray);\n    styleAdjuster(amplitudeArray);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => songFile.play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"PLAY DA SONG\"), console.log('freq', new Uint8Array(32)), console.log(amplitudeValues), console.log('data', audioData));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","frequencyBandArray","Array","keys","amplitudeValues","amplitudeArray","Uint8Array","audioData","setAudioData","songFile","setSongFile","useComponentWillMount","func","willMount","current","audioFile","Audio","audioContext","AudioContext","source","createMediaElementSource","analyser","createAnalyser","src","fftSize","connect","destination","getFrequencyData","styleAdjuster","bufferLength","frequencyBinCount","getByteFrequencyData","play","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B,MAAIC,kBAAkB,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAJ,CAAzB;AACA,QAAMC,eAAe,GAAGP,MAAM,CAAC,IAAD,CAA9B;AACA,QAAMQ,cAAc,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAvB;AAGA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,EAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMe,qBAAqB,GAAGC,IAAI,IAAI;AAClC,UAAMC,SAAS,GAAGhB,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAIgB,SAAS,CAACC,OAAd,EAAuB;AACrBF,MAAAA,IAAI;AACL;;AAEDC,IAAAA,SAAS,CAACC,OAAV,GAAoB,KAApB;AACD,GARH;;AAUAH,EAAAA,qBAAqB,CAAC,MAAM;AACxB,UAAMI,SAAS,GAAG,IAAIC,KAAJ,EAAlB;AACAN,IAAAA,WAAW,CAACK,SAAD,CAAX;AACA,UAAME,YAAY,GAAG,IAAIC,YAAJ,EAArB;AACA,UAAMC,MAAM,GAAGF,YAAY,CAACG,wBAAb,CAAsCL,SAAtC,CAAf;AACA,QAAIM,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AACAP,IAAAA,SAAS,CAACQ,GAAV,GAAgBxB,SAAhB;AACAsB,IAAAA,QAAQ,CAACG,OAAT,GAAmB,EAAnB;AACAL,IAAAA,MAAM,CAACM,OAAP,CAAeR,YAAY,CAACS,WAA5B;AACAP,IAAAA,MAAM,CAACM,OAAP,CAAeJ,QAAf;AACA,WAAOb,YAAY,CAACa,QAAD,CAAnB;AACH,GAXoB,CAArB;;AAgBA,QAAMM,gBAAgB,GAAIC,aAAD,IAAmB;AACxC,UAAMC,YAAY,GAAGtB,SAAS,CAACuB,iBAA/B;AAEAvB,IAAAA,SAAS,IAAIA,SAAS,CAACwB,oBAAV,CAA+B1B,cAA/B,CAAb;AACAuB,IAAAA,aAAa,CAACvB,cAAD,CAAb;AACH,GALD;;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAE,MAAMI,QAAQ,CAACuB,IAAT,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,IAAI5B,UAAJ,CAAe,EAAf,CAApB,CAFL,EAGK2B,OAAO,CAACC,GAAR,CAAY9B,eAAZ,CAHL,EAIK6B,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB3B,SAApB,CAJL,CADJ;AAQH,CAvDD;;AAyDA,eAAeP,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    let frequencyBandArray = [...Array(25).keys()];\n    const amplitudeValues = useRef(null);\n    const amplitudeArray = new Uint8Array(32);\n\n\n    const [audioData, setAudioData] = useState([]);\n    const [songFile, setSongFile] = useState();\n\n    useEffect(() => {\n        \n    }, []);\n\n    const useComponentWillMount = func => {\n        const willMount = useRef(true);\n      \n        if (willMount.current) {\n          func();\n        }\n      \n        willMount.current = false;\n      };\n\n    useComponentWillMount(() => {\n        const audioFile = new Audio();\n        setSongFile(audioFile);\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaElementSource(audioFile);\n        let analyser = audioContext.createAnalyser();\n        audioFile.src = soundFile;\n        analyser.fftSize = 64;\n        source.connect(audioContext.destination);\n        source.connect(analyser);\n        return setAudioData(analyser);\n    })\n \n    \n\n\n    const getFrequencyData = (styleAdjuster) => {\n        const bufferLength = audioData.frequencyBinCount;\n\n        audioData && audioData.getByteFrequencyData(amplitudeArray);\n        styleAdjuster(amplitudeArray);\n    }\n\n    return (\n        <div>\n            <button onClick={() => songFile.play()}>PLAY DA SONG</button>\n            {console.log('freq', new Uint8Array(32))}\n            {console.log(amplitudeValues)}\n            {console.log('data', audioData)}\n        </div>\n    );\n}\n\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}