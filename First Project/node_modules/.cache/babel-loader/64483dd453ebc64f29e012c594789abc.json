{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nconst CircleContainer = () => {\n  let ref = useRef();\n  let audio = new Audio();\n  let context = new (window.AudioContext || window.webkitAudioContext)();\n  let analyser = context.createAnalyser();\n  let freqArr = new Uint8Array(analyser.frequencyBinCount);\n  audio.src = \"/it_came_from_china.mp3\";\n  let source = context.createMediaElementSource(audio);\n  const [ctx, setCtx] = useState();\n  useEffect(() => {\n    let getCtx = ref.current;\n    setCtx(getCtx.getContext(\"2d\"));\n  });\n  let radius = 150;\n  let center_x = ctx && ctx.width / 2;\n  let center_y = ctx && ctx.height / 2;\n\n  const animationLooper = () => {\n    let bars = 200; // ctx.imageSmoothingEnabled = false;\n\n    ctx && ctx.beginPath();\n    ctx && ctx.arc(center_x, center_y, radius, 0, 2 * Math.PI);\n    ctx && ctx.stroke();\n    analyser.getByteFrequencyData(freqArr);\n\n    for (let i = 0; i < bars; i++) {\n      let rads = Math.PI * 2 / bars;\n      let bar_height = 100;\n      let bar_width = 2;\n      let x = center_x + Math.cos(rads * i) * radius;\n      let y = center_y + Math.sin(rads * i) * radius;\n      let x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      let y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n      drawBar(x, y, x_end, y_end, bar_width, freqArr[i], ctx && ctx);\n    }\n\n    window.requestAnimationFrame(animationLooper);\n  };\n\n  const drawBar = (x1, y1, x2, y2, width, frequency, ctx) => {\n    console.log('here');\n    let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  };\n\n  const initPage = () => {\n    source.connect(analyser);\n    analyser.connect(context.destination); // audio.play();\n\n    animationLooper();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircleCanvas, {\n    width: \"600\",\n    height: \"600\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, ctx && initPage()));\n};\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","useEffect","useState","useRef","styled","Wrapper","CircleCanvas","CircleContainer","ref","audio","Audio","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","freqArr","Uint8Array","frequencyBinCount","src","source","createMediaElementSource","ctx","setCtx","getCtx","current","getContext","radius","center_x","width","center_y","height","animationLooper","bars","beginPath","arc","Math","PI","stroke","getByteFrequencyData","i","rads","bar_height","bar_width","x","cos","y","sin","x_end","y_end","drawBar","requestAnimationFrame","x1","y1","x2","y2","frequency","console","log","lineColor","strokeStyle","lineWidth","moveTo","lineTo","initPage","connect","destination"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nconst CircleCanvas = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\n\n\nconst CircleContainer = () => {\n    let ref = useRef();\n    let audio = new Audio();\n    let context = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = context.createAnalyser();\n    let freqArr = new Uint8Array(analyser.frequencyBinCount);\n    audio.src = \"/it_came_from_china.mp3\";\n    let source = context.createMediaElementSource(audio);\n\n    const [ctx, setCtx] = useState()\n    \n    useEffect(() => {\n        let getCtx = ref.current;\n        setCtx(getCtx.getContext(\"2d\"));\n    })\n\n    let radius = 150;\n    let center_x = ctx && ctx.width / 2;\n    let center_y = ctx && ctx.height / 2;\n\n    const animationLooper = () => {\n            let bars = 200;\n            // ctx.imageSmoothingEnabled = false;\n            ctx && ctx.beginPath();\n            ctx && ctx.arc(center_x,center_y,radius,0,2*Math.PI);\n            ctx && ctx.stroke();\n        \n            analyser.getByteFrequencyData(freqArr);\n    \n            for(let i=0; i < bars; i++) {\n                let rads = Math.PI * 2 / bars;\n                let bar_height = 100;\n                let bar_width = 2;\n                let x = center_x + Math.cos(rads * i) * (radius);\n                let y = center_y + Math.sin(rads * i) * (radius);\n                let x_end = center_x + Math.cos(rads * i)*(radius + bar_height);\n                let y_end = center_y + Math.sin(rads * i)*(radius + bar_height);\n                drawBar(x, y, x_end, y_end, bar_width, freqArr[i], ctx && ctx);\n            }\n            \n            window.requestAnimationFrame(animationLooper);\n        \n    }\n    \n    const drawBar = (x1, y1, x2, y2, width,frequency, ctx) => {\n        console.log('here')\n        let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        ctx.strokeStyle = lineColor;\n        ctx.lineWidth = width;\n        ctx.beginPath();\n        ctx.moveTo(x1,y1);\n        ctx.lineTo(x2,y2);\n        ctx.stroke();\n    }\n    const initPage = () => {\n        source.connect(analyser);\n        analyser.connect(context.destination);\n        // audio.play();\n        animationLooper();\n}\n    \n\n    \n    return (\n        <Wrapper>\n            <CircleCanvas width=\"600\" height=\"600\" ref={ref}>\n                {ctx && initPage()}\n                {/* <Circle />\n                <Bar /> */}\n                {/* {ctx && drawCircle()} */}\n                {/* {ctx && drawBars()} */}\n            </CircleCanvas>\n        </Wrapper>\n    )\n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}