{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n  // const [analyserState, setAnalyserState] = useState();\n  // const [freqArray, setFreqArray] = useState([]);\n  // const [audioState, setAudioState] = useState();\n  const [isplaying, setplaying] = useState(false);\n\n  function play() {\n    setplaying(true);\n    audio.play();\n  }\n\n  function pause() {\n    setplaying(false);\n    audio.pause();\n  }\n\n  let context = new AudioContext();\n  let audio = new Audio(soundFile);\n  let source = context.createMediaElementSource(audio);\n  let analyser = context.createAnalyser();\n  source.connect(analyser);\n  analyser.connect(context.destination);\n  analyser.fftSize = 256;\n  let freq_array = new Uint8Array(analyser.frequencyBinCount); // let bufferLength = analyser.frequencyBinCount;\n  // let dataArray = new Uint8Array(bufferLength);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, console.log(freq_array), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => play(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Play Audio\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => pause(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Pause Audio\"), /*#__PURE__*/React.createElement(VisualDemo, {\n    analyser: analyser,\n    dataArray: freq_array,\n    bufferLength: analyser.frequencyBinCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default AudioDataContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/audiobars.js"],"names":["React","useState","useEffect","useRef","VisualDemo","soundFile","AudioDataContainer","isplaying","setplaying","play","audio","pause","context","AudioContext","Audio","source","createMediaElementSource","analyser","createAnalyser","connect","destination","fftSize","freq_array","Uint8Array","frequencyBinCount","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;;AAGA,WAASQ,IAAT,GAAgB;AACZD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,KAAK,CAACD,IAAN;AACH;;AAED,WAASE,KAAT,GAAiB;AACbH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,KAAK,CAACC,KAAN;AACH;;AAED,MAAIC,OAAO,GAAG,IAAIC,YAAJ,EAAd;AACA,MAAIH,KAAK,GAAG,IAAII,KAAJ,CAAUT,SAAV,CAAZ;AACA,MAAIU,MAAM,GAAGH,OAAO,CAACI,wBAAR,CAAiCN,KAAjC,CAAb;AACA,MAAIO,QAAQ,GAAGL,OAAO,CAACM,cAAR,EAAf;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAeF,QAAf;AACAA,EAAAA,QAAQ,CAACE,OAAT,CAAiBP,OAAO,CAACQ,WAAzB;AACAH,EAAAA,QAAQ,CAACI,OAAT,GAAmB,GAAnB;AACA,MAAIC,UAAU,GAAG,IAAIC,UAAJ,CAAeN,QAAQ,CAACO,iBAAxB,CAAjB,CA1B6B,CA4B7B;AACA;;AAEA,sBACI,0CACCC,OAAO,CAACC,GAAR,CAAYJ,UAAZ,CADD,eAEA;AAAQ,IAAA,OAAO,EAAE,MAAMb,IAAI,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,eAGA;AAAQ,IAAA,OAAO,EAAE,MAAME,KAAK,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHA,eAIA,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEM,QAAtB;AAAgC,IAAA,SAAS,EAAEK,UAA3C;AAAuD,IAAA,YAAY,EAAEL,QAAQ,CAACO,iBAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,CADJ;AAQH,CAvCD;;AAwCA,eAAelB,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport VisualDemo from './visualdemo';\nimport soundFile from '../music/it_comes_from_china.ogg';\n\nconst AudioDataContainer = () => {\n\n    // const [analyserState, setAnalyserState] = useState();\n    // const [freqArray, setFreqArray] = useState([]);\n    // const [audioState, setAudioState] = useState();\n\n    const [isplaying, setplaying] = useState(false);\n\n\n    function play() {\n        setplaying(true);\n        audio.play();\n    }\n\n    function pause() {\n        setplaying(false);\n        audio.pause();\n    }\n\n    let context = new AudioContext();\n    let audio = new Audio(soundFile);\n    let source = context.createMediaElementSource(audio);\n    let analyser = context.createAnalyser();\n    source.connect(analyser);\n    analyser.connect(context.destination);\n    analyser.fftSize = 256;\n    let freq_array = new Uint8Array(analyser.frequencyBinCount);\n\n    // let bufferLength = analyser.frequencyBinCount;\n    // let dataArray = new Uint8Array(bufferLength);\n\n    return(\n        <>\n        {console.log(freq_array)}\n        <button onClick={() => play()}>Play Audio</button>\n        <button onClick={() => pause()}>Pause Audio</button>\n        <VisualDemo analyser={analyser} dataArray={freq_array} bufferLength={analyser.frequencyBinCount} />\n        </>\n    )\n}\nexport default AudioDataContainer;"]},"metadata":{},"sourceType":"module"}