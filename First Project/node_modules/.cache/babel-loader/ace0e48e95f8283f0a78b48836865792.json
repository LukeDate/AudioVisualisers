{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js\";\nimport React, { useRef, useEffect } from 'react'; // import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport '../App.css';\n\nconst VisualDemo = ({ ...props\n}) => {\n  let Ref = useRef();\n  const [divHeight, setHeight] = useState(0);\n\n  function renderFrame(canvas) {\n    // console.log(canvas);\n    // let canvas = document.getElementById(\"canvas\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    // let ctx = canvas.current.getContext('2d');\n    // let width = canvas.width;\n    // let height = canvas.height;\n    let barWidth = width / props.bufferLength;\n    let barHeight; // let x = 0;\n    // requestAnimationFrame(renderFrame);\n    // x=0;\n\n    let freqData = props.analyser.getByteFrequencyData(props.dataArray);\n    console.log(freqData);\n\n    for (let i = 0; i < props.bufferLength; i++) {\n      barHeight = props.dataArray[i];\n      setHeight(barHeight + 25 * (i / props.bufferLength)); // let g = 250 * (i/props.bufferLength);\n      // let b = 50;\n      // ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n      // ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n      // x += barWidth + 1;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: Ref,\n    height: 200,\n    width: 750,\n    id: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, props.isPlaying && renderFrame(Ref));\n};\n\nexport default VisualDemo;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js"],"names":["React","useRef","useEffect","VisualDemo","props","Ref","divHeight","setHeight","useState","renderFrame","canvas","barWidth","width","bufferLength","barHeight","freqData","analyser","getByteFrequencyData","dataArray","console","log","i","isPlaying"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAA0C,OAA1C,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AACjC,MAAIC,GAAG,GAAGJ,MAAM,EAAhB;AACA,QAAM,CAACK,SAAD,EAAYC,SAAZ,IAAyBC,QAAQ,CAAC,CAAD,CAAvC;;AAEA,WAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,QAAIC,QAAQ,GAAIC,KAAK,GAAGR,KAAK,CAACS,YAA9B;AACA,QAAIC,SAAJ,CAX2B,CAY3B;AACA;AACA;;AACA,QAAIC,QAAQ,GAAGX,KAAK,CAACY,QAAN,CAAeC,oBAAf,CAAoCb,KAAK,CAACc,SAA1C,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;;AACA,SAAI,IAAIM,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGjB,KAAK,CAACS,YAAvB,EAAqCQ,CAAC,EAAtC,EAAyC;AACvCP,MAAAA,SAAS,GAAGV,KAAK,CAACc,SAAN,CAAgBG,CAAhB,CAAZ;AACAd,MAAAA,SAAS,CAACO,SAAS,GAAI,MAAMO,CAAC,GAACjB,KAAK,CAACS,YAAd,CAAd,CAAT,CAFuC,CAIvC;AACA;AACA;AACA;AACA;AACD;AACF;;AACD,sBACE;AAAQ,IAAA,GAAG,EAAER,GAAb;AAAkB,IAAA,MAAM,EAAE,GAA1B;AAA+B,IAAA,KAAK,EAAE,GAAtC;AAA2C,IAAA,EAAE,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACkB,SAAN,IAAmBb,WAAW,CAACJ,GAAD,CADjC,CADF;AAMD,CAtCD;;AAwCA,eAAeF,UAAf","sourcesContent":["import React, { useRef, useEffect }  from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\n\nconst VisualDemo = ({...props}) => {\n  let Ref = useRef()\n  const [divHeight, setHeight] = useState(0);\n  \n  function renderFrame(canvas) {\n    // console.log(canvas);\n    // let canvas = document.getElementById(\"canvas\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    // let ctx = canvas.current.getContext('2d');\n    \n    // let width = canvas.width;\n    // let height = canvas.height;\n    \n    let barWidth = (width / props.bufferLength);\n    let barHeight;\n    // let x = 0;\n    // requestAnimationFrame(renderFrame);\n    // x=0;\n    let freqData = props.analyser.getByteFrequencyData(props.dataArray);\n    console.log(freqData)\n    for(let i=0; i < props.bufferLength; i++){\n      barHeight = props.dataArray[i];\n      setHeight(barHeight + (25 * (i/props.bufferLength)));\n\n      // let g = 250 * (i/props.bufferLength);\n      // let b = 50;\n      // ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n      // ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n      // x += barWidth + 1;\n    }\n  }  \n  return (\n    <canvas ref={Ref} height={200} width={750} id=\"canvas\">\n      {props.isPlaying && renderFrame(Ref)}\n      {/* {renderFrame(Ref.current)} */}\n    </canvas>\n  )\n}\n\nexport default VisualDemo;"]},"metadata":{},"sourceType":"module"}