{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js\";\nimport React, { useRef, useEffect } from 'react'; // import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport '../App.css';\n\nconst VisualDemo = ({ ...props\n}) => {\n  let Ref = useRef(null);\n  useEffect(() => {\n    console.log('hello');\n    renderFrame(Ref.current);\n  }, [Ref.current]);\n\n  function renderFrame(canvas) {\n    console.log(canvas); // let canvas = document.getElementById(\"canvas\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n\n    let ctx = canvas.getContext('2d');\n    let width = canvas.width;\n    let height = canvas.height;\n    let barWidth = width / props.bufferLength;\n    let barHeight;\n    let x = 0;\n    requestAnimationFrame(renderFrame);\n    x = 0;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, width, height);\n\n    for (let i = 0; i < props.bufferLength; i++) {\n      barHeight = props.dataArray[i];\n      let r = barHeight + 25 * (i / props.bufferLength);\n      let g = 250 * (i / props.bufferLength);\n      let b = 50;\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: Ref,\n    height: 200,\n    width: 750,\n    id: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, console.log(Ref), renderFrame(Ref.current));\n};\n\nexport default VisualDemo;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/visualdemo.js"],"names":["React","useRef","useEffect","VisualDemo","props","Ref","console","log","renderFrame","current","canvas","ctx","getContext","width","height","barWidth","bufferLength","barHeight","x","requestAnimationFrame","analyser","getByteFrequencyData","dataArray","fillStyle","fillRect","i","r","g","b"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAA0C,OAA1C,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AACjC,MAAIC,GAAG,GAAGJ,MAAM,CAAC,IAAD,CAAhB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAC,IAAAA,WAAW,CAACH,GAAG,CAACI,OAAL,CAAX;AACD,GAHQ,EAGN,CAACJ,GAAG,CAACI,OAAL,CAHM,CAAT;;AAKA,WAASD,WAAT,CAAqBE,MAArB,EAA6B;AAC3BJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAD2B,CAE3B;AACA;AACA;;AACA,QAAIC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAV;AAEA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,MAAM,GAAGJ,MAAM,CAACI,MAApB;AAEA,QAAIC,QAAQ,GAAIF,KAAK,GAAGT,KAAK,CAACY,YAA9B;AACA,QAAIC,SAAJ;AACA,QAAIC,CAAC,GAAG,CAAR;AACAC,IAAAA,qBAAqB,CAACX,WAAD,CAArB;AACAU,IAAAA,CAAC,GAAC,CAAF;AACAd,IAAAA,KAAK,CAACgB,QAAN,CAAeC,oBAAf,CAAoCjB,KAAK,CAACkB,SAA1C;AACAX,IAAAA,GAAG,CAACY,SAAJ,GAAc,MAAd;AACAZ,IAAAA,GAAG,CAACa,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBX,KAAnB,EAA0BC,MAA1B;;AACA,SAAI,IAAIW,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGrB,KAAK,CAACY,YAAvB,EAAqCS,CAAC,EAAtC,EAAyC;AACvCR,MAAAA,SAAS,GAAGb,KAAK,CAACkB,SAAN,CAAgBG,CAAhB,CAAZ;AACA,UAAIC,CAAC,GAAGT,SAAS,GAAI,MAAMQ,CAAC,GAACrB,KAAK,CAACY,YAAd,CAArB;AACA,UAAIW,CAAC,GAAG,OAAOF,CAAC,GAACrB,KAAK,CAACY,YAAf,CAAR;AACA,UAAIY,CAAC,GAAG,EAAR;AACAjB,MAAAA,GAAG,CAACY,SAAJ,GAAgB,SAASG,CAAT,GAAa,GAAb,GAAmBC,CAAnB,GAAuB,GAAvB,GAA6BC,CAA7B,GAAgC,GAAhD;AACAjB,MAAAA,GAAG,CAACa,QAAJ,CAAaN,CAAb,EAAgBJ,MAAM,GAAGG,SAAzB,EAAoCF,QAApC,EAA8CE,SAA9C;AACAC,MAAAA,CAAC,IAAIH,QAAQ,GAAG,CAAhB;AACD;AACF;;AACD,sBACE;AAAQ,IAAA,GAAG,EAAEV,GAAb;AAAkB,IAAA,MAAM,EAAE,GAA1B;AAA+B,IAAA,KAAK,EAAE,GAAtC;AAA2C,IAAA,EAAE,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CADH,EAEGG,WAAW,CAACH,GAAG,CAACI,OAAL,CAFd,CADF;AAMD,CA1CD;;AA4CA,eAAeN,UAAf","sourcesContent":["import React, { useRef, useEffect }  from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import EqualizerIcon from '@material-ui/icons/Equalizer';\n// import { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\n\nconst VisualDemo = ({...props}) => {\n  let Ref = useRef(null)\n\n  useEffect(() => {\n    console.log('hello')\n    renderFrame(Ref.current)\n  }, [Ref.current])\n  \n  function renderFrame(canvas) {\n    console.log(canvas);\n    // let canvas = document.getElementById(\"canvas\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    let ctx = canvas.getContext('2d');\n    \n    let width = canvas.width;\n    let height = canvas.height;\n    \n    let barWidth = (width / props.bufferLength);\n    let barHeight;\n    let x = 0;\n    requestAnimationFrame(renderFrame);\n    x=0;\n    props.analyser.getByteFrequencyData(props.dataArray);\n    ctx.fillStyle=\"#000\";\n    ctx.fillRect(0, 0, width, height);\n    for(let i=0; i < props.bufferLength; i++){\n      barHeight = props.dataArray[i];\n      let r = barHeight + (25 * (i/props.bufferLength));\n      let g = 250 * (i/props.bufferLength);\n      let b = 50;\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b +\")\";\n      ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  }  \n  return (\n    <canvas ref={Ref} height={200} width={750} id=\"canvas\">\n      {console.log(Ref)}\n      {renderFrame(Ref.current)}\n    </canvas>\n  )\n}\n\nexport default VisualDemo;"]},"metadata":{},"sourceType":"module"}