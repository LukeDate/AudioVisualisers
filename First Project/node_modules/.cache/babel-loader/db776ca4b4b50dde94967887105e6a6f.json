{"ast":null,"code":"var _jsxFileName = \"/Users/admin/audio-visual/audio-visualizer/src/components/circle.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nconst CircleWrap = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\nconst Circle = styled('div')`\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    border: 1px solid black;\n    background: white;\n    `;\nconst Bar = styled('div')`\n    height: 100px;\n    width: 0px;\n    border: 1px solid black;\n    `; // let ctx = c.getContext(\"2d\");\n// const drawCircle = () => {\n//     ctx.beginPath();\n//     ctx.arc(100, 100, 100, 0, 2 * Math.PI);\n//     ctx.stroke();\n// }\n// const drawBars = (angle,distance,label) => {\n//     var x = 100 + 100 * Math.cos(-angle*Math.PI/180) * distance;\n//     var y = 100 + 100 * Math.sin(-angle*Math.PI/180) * distance;\n//     ctx.beginPath();\n//     ctx.arc(x, y, 4, 0, 2 * Math.PI);\n//     ctx.fill();\n//     ctx.font = \"10px\";\n//     ctx.fillText(label,x + 10,y);\n// }\n\nconst CircleContainer = () => {\n  let ref = useRef();\n  let dpi = window.devicePixelRatio;\n  useEffect(() => {\n    let getCtx = ref.current;\n    console.log(getCtx);\n    setCtx(getCtx);\n  }, []);\n  const [ctx, setCtx] = useState('');\n  let radius = 150;\n  let center_x = ctx.width / 2;\n  let center_y = ctx.height / 2;\n\n  const drawCircle = () => {\n    let gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n    gradient.addColorStop(0, \"rgba(35, 7, 77, 1)\");\n    gradient.addColorStop(1, \"rgba(204, 83, 51, 1)\");\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.getContext('2d').imageSmoothingEnabled = false;\n    ctx.getContext('2d').beginPath();\n    ctx.getContext('2d').arc(center_x, center_y, radius, 0, 2 * Math.PI);\n    ctx.getContext('2d').stroke();\n  };\n\n  const drawBar = (x1, y1, x2, y2, width, frequency) => {\n    let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n    ctx.getContext('2d').strokeStyle = lineColor;\n    ctx.getContext('2d').lineWidth = width;\n    ctx.getContext('2d').beginPath();\n    ctx.getContext('2d').moveTo(x1, y1);\n    ctx.getContext('2d').lineTo(x2, y2);\n    ctx.getContext('2d').stroke();\n  };\n\n  const drawBars = () => {\n    let bars = 200;\n\n    for (let i = 0; i < bars; i++) {\n      let rads = Math.PI * 2 / bars;\n      let bar_height = 100;\n      let bar_width = 2;\n      let x = center_x + Math.cos(rads * i) * radius;\n      let y = center_y + Math.sin(rads * i) * radius;\n      let x_end = center_x + Math.cos(rads * i) * (radius + bar_height);\n      let y_end = center_y + Math.sin(rads * i) * (radius + bar_height);\n      drawBar(x, y, x_end, y_end, bar_width);\n    }\n  };\n\n  let height = ctx && ctx.height * dpi;\n  let width = ctx && ctx.width * dpi;\n  return /*#__PURE__*/React.createElement(CircleWrap, {\n    width: \"600\",\n    height: \"600\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, ctx && drawCircle(), ctx && drawBars());\n};\n\nexport default CircleContainer;","map":{"version":3,"sources":["/Users/admin/audio-visual/audio-visualizer/src/components/circle.js"],"names":["React","useEffect","useState","useRef","styled","CircleWrap","Circle","Bar","CircleContainer","ref","dpi","window","devicePixelRatio","getCtx","current","console","log","setCtx","ctx","radius","center_x","width","center_y","height","drawCircle","gradient","createLinearGradient","canvas","addColorStop","fillStyle","fillRect","getContext","imageSmoothingEnabled","beginPath","arc","Math","PI","stroke","drawBar","x1","y1","x2","y2","frequency","lineColor","strokeStyle","lineWidth","moveTo","lineTo","drawBars","bars","i","rads","bar_height","bar_width","x","cos","y","sin","x_end","y_end"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst CircleWrap = styled('canvas')`\n    margin: 0 auto;\n    // height: 100%;\n`;\n\nconst Circle = styled('div')`\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    border: 1px solid black;\n    background: white;\n    `;\n    \n    const Bar = styled('div')`\n    height: 100px;\n    width: 0px;\n    border: 1px solid black;\n    `;\n    \n\n// let ctx = c.getContext(\"2d\");\n\n// const drawCircle = () => {\n//     ctx.beginPath();\n//     ctx.arc(100, 100, 100, 0, 2 * Math.PI);\n//     ctx.stroke();\n// }\n\n// const drawBars = (angle,distance,label) => {\n//     var x = 100 + 100 * Math.cos(-angle*Math.PI/180) * distance;\n//     var y = 100 + 100 * Math.sin(-angle*Math.PI/180) * distance;\n\n//     ctx.beginPath();\n//     ctx.arc(x, y, 4, 0, 2 * Math.PI);\n//     ctx.fill();\n\n//     ctx.font = \"10px\";\n//     ctx.fillText(label,x + 10,y);\n// }\n\nconst CircleContainer = () => {\n    let ref = useRef();\n    let dpi = window.devicePixelRatio;\n    useEffect(() => {\n        let getCtx = ref.current;\n        console.log(getCtx);\n        setCtx(getCtx);\n    }, [])\n    const [ctx, setCtx] = useState('')\n    \n    let radius = 150;\n    let center_x = ctx.width / 2;\n    let center_y = ctx.height / 2;\n        \n    const drawCircle = () => {\n        let gradient = ctx.createLinearGradient(0,0,0,canvas.height);\n        gradient.addColorStop(0,\"rgba(35, 7, 77, 1)\");\n        gradient.addColorStop(1,\"rgba(204, 83, 51, 1)\");\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.getContext('2d').imageSmoothingEnabled = false;\n        ctx.getContext('2d').beginPath();\n        ctx.getContext('2d').arc(center_x,center_y,radius,0,2*Math.PI);\n        ctx.getContext('2d').stroke();\n    }\n\n    const drawBar = (x1, y1, x2, y2, width,frequency) => {\n    \n        let lineColor = \"rgb(\" + frequency + \", \" + frequency + \", \" + 205 + \")\";\n        \n        ctx.getContext('2d').strokeStyle = lineColor;\n        ctx.getContext('2d').lineWidth = width;\n        ctx.getContext('2d').beginPath();\n        ctx.getContext('2d').moveTo(x1,y1);\n        ctx.getContext('2d').lineTo(x2,y2);\n        ctx.getContext('2d').stroke();\n    }\n\n    const drawBars = () => {\n        let bars = 200;\n        for(let i=0; i < bars; i++) {\n            let rads = Math.PI * 2 / bars;\n            let bar_height = 100;\n            let bar_width = 2;\n            let x = center_x + Math.cos(rads * i) * (radius);\n\t        let y = center_y + Math.sin(rads * i) * (radius);\n            let x_end = center_x + Math.cos(rads * i)*(radius + bar_height);\n            let y_end = center_y + Math.sin(rads * i)*(radius + bar_height);\n\n            drawBar(x, y, x_end, y_end, bar_width);\n        }\n    }\n\n    let height = ctx && ctx.height * dpi\n    let width = ctx && ctx.width * dpi\n    \n    return (\n        <CircleWrap width=\"600\" height=\"600\" ref={ref}>\n            {/* <Circle />\n            <Bar /> */}\n            {ctx && drawCircle()}\n            {ctx && drawBars()}\n        </CircleWrap>\n    )\n}\n\nexport default CircleContainer;"]},"metadata":{},"sourceType":"module"}